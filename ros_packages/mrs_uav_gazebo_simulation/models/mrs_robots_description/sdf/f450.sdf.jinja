<?xml version="1.0" encoding="utf-8"?>
<sdf version="1.6">

  {%- import 'mrs_robots_description/sdf/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 1.7 -%} {# [kg] #}
  {%- set body_radius = 0.2 -%} {# [m] #}
  {%- set body_height = 0.1 -%} {# [m] #}
  {%- set mass_prop = 0.005 -%} {# [kg] #}
  {%- set radius_prop = 0.118 -%} {# [m] #}
  {%- set prop_offset_top = 0.0235 -%} {# [m] #}
  {%- set arm_length = 0.23 -%} {# [m] #}
  {%- set arm_height = 0.038 -%} {# [m] #}
  {%- set board_radius = 0.065 -%} {# [m] #}
  {%- set board_height = 0.002 -%} {# [m] #}
  {%- set holder_offset = 0.02 -%} {# [m] #}
  {%- set leg_offset_z = 0.098 -%} {# [m] #}
  {%- set leg_offset_r = 0.0072 -%} {# [m] #}
  {%- set leg_radius = 0.012 -%} {# [m] #}
  {%- set leg_height = 0.17 -%} {# [m] #}
  {%- set pixhawk_offset = -0.0075 -%} {# [m] #}
  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 0.0159236 -%}
  {%- set motor_constant = 10.04544 -%} {# [kg.m/s^2] #}
  {%- set moment_constant = 0.016 -%} {# [m] #}
  {%- set time_constant_up = 1.0 / 80.0 -%} {# [s] #}
  {%- set time_constant_down = 1.0 / 40.0 -%} {# [s] #}
  {%- set max_rot_velocity = 1 -%} {# [rad/s] #}
  {%- set rotor_drag_coefficient = 0.001 -%} {# orig 8.06428e-04 #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.2 -%} {# [m] #}
  {%- set inertia_body_height = 0.05 -%} {# [m] #}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Drone parts {--> #}
  {%- set central_board_mesh_top = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_central_top.dae' -%}
  {%- set central_board_mesh_bottom = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_central_bottom.dae' -%}
  {%- set arm_mesh_file = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_arm.dae' -%}
  {%- set leg_mesh_file = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_leg_170mm.dae'-%}
  {%- set motor_mesh_file = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_rotor.dae' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_prop.dae'-%}
  {%- set pixhawk_mesh_file = 'model://mrs_robots_description/meshes/sensors/pixhawk.dae' -%}
  {%- set nuc_mesh_file = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_nuc.dae' -%}
  {# <!--}--> #}

  {# Mounts {--> #}
  {%- set battery_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_battery_mount.dae' -%}
  {%- set bluefox_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_bluefox_mount.dae' -%}
  {%- set ouster_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_ouster_mount.dae' -%}
  {%- set garmin_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_garmin_mount.dae' -%}
  {%- set rplidar_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_rplidar_mount.dae' -%}
  {%- set realsense_front_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_realsense_front_pitched_0_mount.dae' -%}
  {%- set realsense_front_pitched_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_realsense_front_pitched_45_mount.dae' -%}
  {%- set realsense_front_down_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_realsense_front_pitched_90_mount.dae' -%}
  {%- set uvdar_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_uvdar_mount.dae' -%}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mesh_scale_prop_ccw = '1 1 1' -%}
  {%- set mesh_scale_prop_cw = '-1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = 0.0001 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = 0.0001 -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = 0.0001 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body physics {-->
      {{ generic.multirotor_physics_macro(
        mass = mass,
        body_radius = body_radius,
        body_height = body_height,
        rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
        ixx = body_ixx,
        ixy = body_ixy,
        ixz = body_ixz,
        iyy = body_iyy,
        iyz = body_iyz,
        izz = body_izz)
      }}
      <!--}-->

      <!-- Body visuals {-->

      <!-- Boards {-->
      {{ generic.visual_mesh_macro(
        name = 'lower_central_board',
        mesh_file = central_board_mesh_bottom,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'upper_central_board',
        mesh_file = central_board_mesh_top,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Arms {-->
      {{ generic.visual_mesh_macro(
        name = 'front_right_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'White',
        x = board_radius * math.sin(math.radians(45)),
        y = -board_radius * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-45))
      }}

      {{ generic.visual_mesh_macro(
        name = 'front_left_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'White',
        x = board_radius * math.sin(math.radians(45)),
        y = board_radius * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = math.radians(45))
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_right_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = -board_radius * math.sin(math.radians(45)),
        y = -board_radius * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-135))
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_left_arm',
        mesh_file = arm_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = -board_radius * math.sin(math.radians(45)),
        y = board_radius * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = math.radians(135))
      }}
      <!--}-->

      <!-- Intel NUC {-->
      {{ generic.visual_mesh_macro(
        name = 'NUC',
        mesh_file = nuc_mesh_file,
        mesh_scale = mesh_scale_milimeters,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0.023,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Pixhawk {-->
      {{ generic.visual_mesh_macro(
        name = 'pixhawk',
        mesh_file = pixhawk_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = -body_height / 2 - pixhawk_offset,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Legs {-->
      {{ generic.leg_macro(
        name = 'front_right_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale_milimeters,
        color = 'White',
        parent = root,
        x = (arm_length - leg_offset_r) * math.sin(math.radians(45)),
        y = -(arm_length - leg_offset_r) * math.sin(math.radians(45)),
        z = arm_height - body_height/2 - leg_offset_z,
        roll = 0,
        pitch = 0,
        yaw = math.radians(135),
        collision_height = leg_height,
        collision_radius = leg_radius)
      }}

      {{ generic.leg_macro(
        name = 'front_left_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale_milimeters,
        color = 'White',
        parent = root,
        x = (arm_length - leg_offset_r) * math.sin(math.radians(45)),
        y = (arm_length - leg_offset_r) * math.sin(math.radians(45)),
        z = arm_height - body_height/2 - leg_offset_z,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-135),
        collision_height = leg_height,
        collision_radius = leg_radius)
      }}

      {{ generic.leg_macro(
        name = 'back_right_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale_milimeters,
        color = 'Red',
        parent = root,
        x = -(arm_length - leg_offset_r) * math.sin(math.radians(45)),
        y = -(arm_length - leg_offset_r) * math.sin(math.radians(45)),
        z = arm_height - body_height/2 - leg_offset_z,
        roll = 0,
        pitch = 0,
        yaw = math.radians(45),
        collision_height = leg_height,
        collision_radius = leg_radius)
      }}

      {{ generic.leg_macro(
        name = 'back_left_leg',
        mesh_file = leg_mesh_file,
        mesh_scale = mesh_scale_milimeters,
        color = 'Red',
        parent = root,
        x = -(arm_length - leg_offset_r) * math.sin(math.radians(45)),
        y = (arm_length - leg_offset_r) * math.sin(math.radians(45)),
        z = arm_height - body_height/2 - leg_offset_z,
        roll = 0,
        pitch = 0,
        yaw = math.radians(-45),
        collision_height = leg_height,
        collision_radius = leg_radius)
      }}
      <!--}-->

      <!-- Motors {-->
      {{ generic.visual_mesh_macro(
        name = 'front_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'front_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length * math.sin(math.radians(45)),
        y = -arm_length * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'back_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length * math.sin(math.radians(45)),
        y = arm_length * math.sin(math.radians(45)),
        z = arm_height - body_height / 2,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Battery mount and battery {-->
      {{ generic.visual_mesh_macro(
        name = 'battery_mount',
        mesh_file = battery_mount_mesh,
        mesh_scale = mesh_scale_milimeters,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = -body_height / 2 - 0.028,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}

      {{ generic.visual_colored_box_macro(
        name = 'battery',
        size_x = 0.13,
        size_y = 0.042,
        size_z = 0.044,
        color = 'Grey',
        x = 0,
        y = 0,
        z = -body_height / 2 - 0.027,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      {# component mounts and holders (these must be passed as args into components, or must be called) {--> #}

      {# Garmin down mount {--> #}
      {%- set garmin_down_mount -%}
        {{ generic.visual_link_macro(
          name = 'garmin_mount',
          mesh_file = garmin_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = -0.055,
          y = 0,
          z = -(arm_height + 0.016),
          roll = math.radians(90),
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Lidar mount 2D {--> #}
      {%- set lidar_mount_2d -%}
        {{ generic.visual_link_macro(
          name = 'lidar_mount_2d',
          mesh_file = rplidar_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0,
          y = 0,
          z = 0.068,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Lidar mount 3D {--> #}
      {%- set lidar_mount_3d -%}
        {{ generic.visual_link_macro(
          name = 'lidar_mount_3d',
          mesh_file = ouster_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0,
          y = 0,
          z = 0.061,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Bluefox mount {--> #}
      {%- set bluefox_mount -%}
      {{ generic.visual_link_macro(
        name = 'bluefox_mount',
        mesh_file = bluefox_mount_mesh,
        mesh_scale = mesh_scale_milimeters,
        color = 'DarkGrey',
        x = 0.051,
        y = 0,
        z = -(arm_height + 0.02),
        roll = math.radians(90),
        pitch = 0,
        yaw = -math.radians(90),
        parent_link = root)
      }}
      {%- endset -%}
      {# <!--}--> #}

      {# Realsense front mount {--> #}
      {%- set realsense_front_mount -%}
        {{ generic.visual_link_macro(
          name = 'realsense_front_mount',
          mesh_file = realsense_front_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.153,
          y = 0,
          z = -0.089,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Realsense front pitched mount {--> #}
      {%- set realsense_front_pitched_mount -%}
        {{ generic.visual_link_macro(
          name = 'realsense_front_pitched_mount',
          mesh_file = realsense_front_pitched_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.153,
          y = 0,
          z = -0.089,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Realsense down mount {--> #}
      {%- set realsense_down_mount -%}
        {{ generic.visual_link_macro(
          name = 'realsense_down_mount',
          mesh_file = realsense_front_down_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.153,
          y = 0,
          z = -0.089,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# UVDAR mount {--> #}
      {%- set uvdar_mount -%}
      {{ generic.visual_link_macro(
        name = 'uvdar_mount',
        mesh_file = uvdar_mount_mesh,
        mesh_scale = mesh_scale_milimeters,
        color = 'DarkGrey',
        x = 0.025,
        y = 0,
        z = 0.036,
        roll = 0,
        pitch = 0,
        yaw = 0,
        parent_link = root)
      }}
      {%- endset -%}
      {# <!--}--> #}

    {# <!--}--> #}

    <!--}-->

    </link>

  {# Air drag {--> #}
  {{ generic.gazebo_fluid_resistance_plugin_macro(
    model_mass = mass,
    verbose = true,
    parent_link = root,
    uav_body_resistance_x = 0.1,
    uav_body_resistance_y = 0.1,
    uav_body_resistance_z = 0.2,
    )
  }}
  {# <!--}--> #}

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': arm_length * math.sin(math.radians(45)),
    'y': -arm_length * math.sin(math.radians(45)),
    'z': arm_height + prop_offset_top - body_height/2,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    },
    {
    'motor_number': 1,
    'direction': 'ccw',
    'x': -arm_length * math.sin(math.radians(45)),
    'y': arm_length * math.sin(math.radians(45)),
    'z': arm_height + prop_offset_top - body_height/2,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    },
    {
    'motor_number': 2,
    'direction': 'cw',
    'x': arm_length * math.sin(math.radians(45)),
    'y': arm_length * math.sin(math.radians(45)),
    'z': arm_height + prop_offset_top - body_height/2,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -arm_length * math.sin(math.radians(45)),
    'y': -arm_length * math.sin(math.radians(45)),
    'z': arm_height + prop_offset_top - body_height/2,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = radius_prop,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = 0,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

    <!-- Pixhawk {-->
    {%- set imu_topic = '/imu' -%}
    {%- set mag_topic = '/mag' -%}
    {%- set baro_topic = '/baro' -%}
    {%- set lidar_topic = '/lidar' -%}

    <!-- Gazebo ground truth {-->
    {{ generic.gazebo_groundtruth_macro(
      home_latitude = 0,
      home_longitude = 0,
      home_altitude = 0)
    }}
    <!--}-->

    <!-- GPS {-->
    {{ generic.gazebo_gps_macro(
      gps_name = 'gps0',
      parent_link = root,
      update_rate = 10,
      gps_noise = true,
      gps_xy_random_walk = 2.0,
      gps_z_random_walk = 4.0,
      gps_xy_noise_density = '2.0e-4',
      gps_z_noise_density = '4.0e-4',
      gps_vxy_noise_density = 0.2,
      gps_vz_noise_density = 0.4,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!-- Magnetometer {-->
    {{ generic.gazebo_magnetometer_macro(
      pub_rate = 100,
      noise_density = 0.0004,
      random_walk = 0.0000064,
      bias_correlation_time = 600,
      mag_topic = mag_topic)
    }}
    <!--}-->

    <!-- Barometer {-->
    {{ generic.gazebo_barometer_macro(
      baro_topic = baro_topic,
      pub_rate = 50,
      baro_drift_pa_per_sec = 0)
    }}
    <!--}-->

    <!-- Mavlink interface {-->
    {{ generic.gazebo_mavlink_interface_macro(
      imu_topic = imu_topic,
      mag_topic = mag_topic,
      baro_topic = baro_topic,
      lidar_topic = lidar_topic,
      mavlink_config = spawner_args['mavlink_config'])
    }}
    <!--}-->

    <!-- IMU {-->
    <!-- NOTE: IMU has to be last, otherwise the simulation is extremely slow! -->
    {{ generic.gazebo_imu_macro(
      imu_name = 'imu',
      parent_link = root,
      imu_topic = '/imu',
      gyroscope_noise_density = 0.00018665,
      gyroscope_random_walk = 0.000038785,
      gyroscope_bias_correlation_time = 1000.0,
      gyroscope_turn_on_bias_sigma = 0.0087,
      accelerometer_noise_density = 0.00186,
      accelerometer_random_walk = 0.006,
      accelerometer_bias_correlation_time = 300.0,
      accelerometer_turn_on_bias_sigma = 0.1960,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!--}-->

    {# ================================================================== #}
    {# ||                  optional sensor definitions                 || #}
    {# ================================================================== #}

    {# Ground truth {--> #}
    {{ components.ground_truth_macro(
      parent_link = root,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ======================= rangefinder sensors ====================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = -0.057,
      y = 0,
      z = -0.069,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = garmin_down_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Garmin up {--> #}
    {{ components.garmin_up_external_macro(
      parent_link = root,
      x = -0.077,
      y = 0,
      z = -0.033,
      roll = 0,
      pitch = math.radians(-90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Teraranger One {--> #}
    {{ components.teraranger_macro(
      parent_link = root,
      x = 0.08,
      y = 0,
      z = -0.05,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ========================== LIDAR sensors ========================= #}

    {# Scanse Sweep {--> #}
    {%- set scanse_sweep = components.scanse_sweep_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0,
      z = 0.113,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ scanse_sweep }}
    {# <!--}--> #}

    {# Rplidar {--> #}
    {%- set rplidar = components.rplidar_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0,
      z = 0.1,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ rplidar }}
    {# <!--}--> #}

    {# Velodyne {--> #}
    {%- set velodyne = components.velodyne_macro(
      parent_link = root,
      sensor_name = 'velodyne',
      x = 0.0,
      y = 0.0,
      z = 0.066,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ velodyne }}
    {# <!--}--> #}

    {# Ouster {--> #}
    {%- set ouster = components.ouster_macro(
      parent_link = root,
      sensor_name = 'os',
      x = 0.0,
      y = 0.0,
      z = 0.066,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ ouster }}
    {# <!--}--> #}

    {# ========================== camera sensors ======================== #}

    {# Fisheye camera placements {--> #}
    {{ components.fisheye_bluefox_macro(
      camera_name = 'fisheye_camera',
      topic_ns_prefix = '',
      parent_link = root,
      x = 0.05,
      y = 0,
      z = - (arm_height + 0.055),
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Bluefox camera placements {--> #}

    {# Bluefox (classic) {--> #}
    {%- set bluefox_camera = components.bluefox_camera_macro(
      camera_name = 'bluefox_optflow',
      parent_link = root,
      x = 0.05,
      y = 0,
      z = - (arm_height + 0.055),
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ bluefox_camera }}
    {# <!--}--> #}

    {# Bluefox reverse {--> #}
    {%- set bluefox_camera_reverse = components.bluefox_camera_reverse_macro(
      camera_name = 'bluefox_optflow',
      parent_link = root,
      x = 0.05,
      y = 0,
      z = - (arm_height + 0.055),
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ bluefox_camera_reverse }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# Realsense placements {--> #}

    {# Realsense down {--> #}
    {{ components.realsense_down_macro(
      camera_name = 'rgbd',
      camera_suffix='_down',
      parent_link = root,
      x = 0.153,
      y = 0,
      z = -0.103,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = realsense_down_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Realsense front pitched {--> #}
    {{ components.realsense_front_pitched_macro(
      camera_name = 'rgbd',
      camera_suffix='_front_pitched',
      parent_link = root,
      x = 0.16,
      y = 0,
      z = -0.089,
      roll = 0,
      pitch = math.radians(45),
      yaw = 0,
      mount = realsense_front_pitched_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Realsense front {--> #}
    {{ components.realsense_front_macro(
      camera_name = 'rgbd',
      camera_suffix='',
      parent_link = root,
      x = 0.155,
      y = 0,
      z = -0.089,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = realsense_front_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Realsense up {--> #}
    {{ components.realsense_up_macro(
      camera_name = 'rgbd',
      camera_suffix='_up',
      parent_link = root,
      x = 0.07,
      y = 0,
      z = 0.025,
      roll = 0,
      pitch = -math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# Mobius camera placements {--> #}

    {# Mobius down {--> #}
    {{ components.mobius_down_macro(
      camera_name = 'mobius_down',
      parent_link = root,
      x = 0.144,
      y = 0.0,
      z = -0.092,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Mobius front {--> #}
    {{ components.mobius_front_macro(
      camera_name = 'mobius_front',
      parent_link = root,
      x = 0.2,
      y = 0.0,
      z = -0.04,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Mobius back left {--> #}
    {{ components.mobius_back_left_macro(
      camera_name = 'mobius_back_left',
      parent_link = root,
      x = -0.1,
      y = 0.1732,
      z = -0.04,
      roll = 0,
      pitch = 0,
      yaw = math.radians(120),
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Mobius back right {--> #}
    {{ components.mobius_back_right_macro(
      camera_name = 'mobius_back_right',
      parent_link = root,
      x = -0.1,
      y = -0.1732,
      z = -0.04,
      roll = 0,
      pitch = 0,
      yaw = -math.radians(120),
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# Dual UV cameras {--> #}
    {{ components.dual_uv_cameras_macro(
      parent_link = root,
      x1 = 0.037,
      y1 = 0.1175,
      z1 = 0.05,
      roll1 = 0,
      pitch1 = 0,
      yaw1 = math.radians(70),
      x2 = 0.037,
      y2 = -0.1175,
      z2 = 0.05,
      roll2 = 0,
      pitch2 = 0,
      yaw2 = -math.radians(70),
      mount = uvdar_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Back UV cameras {--> #}
    {{ components.back_uv_camera_macro(
      parent_link = root,
      x = -0.1,
      y = 0.0,
      z = -0.02,
      roll = math.radians(90),
      pitch = 0,
      yaw = math.radians(180),
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Servo camera {--> #}
    {{ components.servo_camera_macro(
      parent = root,
      parent_frame_name = spawner_args['name'] + '/fcu',
      frame_namespace = spawner_args['name'] + '/servo_camera',
      offset_pitch_link_x = 0.0,
      offset_pitch_link_y = 0.0,
      offset_pitch_link_z = 0.0,
      offset_pitch_link_roll = 0.0,
      offset_pitch_link_yaw = 0.0,
      offset_pitch_link_pitch = 0.0,
      offset_roll_link_x = 0.0,
      offset_roll_link_y = 0.0,
      offset_roll_link_z = 0.0,
      offset_roll_link_roll = 0.0,
      offset_roll_link_yaw = 0.0,
      offset_roll_link_pitch = 0.0,
      offset_yaw_link_x = 0.2,
      offset_yaw_link_y = 0.0,
      offset_yaw_link_z = -0.1,
      offset_yaw_link_roll = 0.0,
      offset_yaw_link_yaw = 0.0,
      offset_yaw_link_pitch = 0.0,
      tilt_update_rate = 30.0,
      min_pitch = -1.57,
      max_pitch = 1.57,
      min_roll = -0.6,
      max_roll = 0.6,
      min_yaw = -1.57,
      max_yaw = 1.57,
      max_pitch_rate = 0.3,
      max_roll_rate = 0.3,
      max_yaw_rate = 0.3,
      camera_update_rate = 30,
      horizontal_fov = 1.92,
      img_width = 1920,
      img_height = 1080,
      compensate_tilt_roll = true,
      compensate_tilt_pitch = true,
      compensate_tilt_yaw = false,
      pitch_link_mesh_file = '',
      roll_link_mesh_file = '',
      yaw_link_mesh_file = '',
      mesh_scale = '',
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# VIO placements {--> #}

    {# VIO (classic) {--> #}
    {{ components.vio_macro(
      sensor_name = 'vio',
      parent_link = root,
      x = 0.107,
      y = 0,
      z = -0.002,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# VIO down {--> #}
    {{ components.vio_down_macro(
      sensor_name = 'vio',
      parent_link = root,
      x = 0.1,
      y = 0,
      z = -0.15,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# ========================== other sensors ========================= #}

    {# Teraranger Tower Evo {--> #}
    {{ components.teraranger_evo_tower_macro(
      parent_link = root,
      visualize = False,
      frame_name = spawner_args['name'] + '/teraranger_tower',
      parent_frame_name = spawner_args['name'] + '/fcu',
      gaussian_noise = 0.0,
      x = 0.0,
      y = 0.0,
      z = 0.1,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Magnetic gripper {--> #}
    {{ components.magnet_gripper_visualization_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0,
      z = - (0.20/2 + 0.01),
      roll = 0,
      pitch = 0,
      yaw = math.radians(90),
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Timepix {--> #}
    {{ components.timepix_macro(
      parent_link = root,
      sensor_name = 'timepix',
      x = 0.115,
      y = -0.05,
      z = -0.05,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Timepix3 {--> #}
    {{ components.timepix3_macro(
      parent_link = root,
      sensor_name = 'timepix3',
      sensor_suffix = '',
      x = 0.115,
      y = -0.05,
      z = -0.05,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Light {--> #}
    {{ components.light_macro(
      parent_link = root,
      max_pitch_rate = 0.1,
      x = 0.2,
      y = 0.0,
      z = -0.1,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# UV leds {--> #}
    {{ components.uv_leds_macro(
      parent_link = root,
      x1 = 0.1767755,
      x2 = 0.1697045,
      y1 = 0.1697045,
      y2 = 0.1767755,
      z = -0.05,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# UV leds beacon {--> #}
    {{ components.uv_leds_beacon_macro(
      parent_link = root,
      x1 = 0.01,
      x2 = 0.0,
      y1 = 0.0,
      y2 = 0.01,
      z = 0.15,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Whycon box {--> #}
    {{ components.whycon_box_macro(
      parent_link = root,
      x = 0,
      y = 0,
      z = 0.08,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Pendulum {--> #}
    {{ components.pendulum_macro(
      parent_link = root,
      x = 0,
      y = 0,
      z = -0.10,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ====================== conditional components ==================== #}

    {# Bluefox mount {--> #}
    {%- if bluefox_camera | replace('\s', '') | length != 0 or bluefox_camera_reverse | replace('\s', '') | length != 0 -%}
      <!-- Bluefox mount {-->
      {{ bluefox_mount }}
      <!--}-->
    {%- endif -%}
    {# <!--}--> #}

    {# 2D lidar mount {--> #}
    {%- if rplidar | replace('\s', '') | length != 0 or scanse_sweep | replace('\s', '') | length != 0 -%}
      <!-- 2d lidar mount {-->
      {{ lidar_mount_2d }}
      <!--}-->
    {%- endif -%}
    {# <!--}--> #}

    {# 3D lidar mount {--> #}
    {%- if velodyne | replace('\s', '') | length != 0 or ouster | replace('\s', '') | length != 0 -%}
      <!-- 3d lidar mount {-->
      {{ lidar_mount_3d }}
      <!--}-->
    {%- endif -%}
    {# <!--}--> #}

  </model>
</sdf>
