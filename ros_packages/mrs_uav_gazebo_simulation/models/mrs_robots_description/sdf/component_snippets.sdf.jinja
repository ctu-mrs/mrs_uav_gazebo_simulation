<?xml version="1.0"? encoding="utf-8">
<sdf version="1.6">

{%- import 'mrs_robots_description/sdf/generic_components.sdf.jinja' as generic -%}

{# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #}
{# !! THIS DOCUMENT CONTAINS ONLY COMPLEX COMPONENT MACROS DESIGNED !! #}
{# !!   FOR USE WITH THE MRS DRONE SPAWNER AND USE THE SPAWNER API  !! #}
{# !! GENERIC SENSORS, VISUAL BLOCKS, PLUGINS ETC BELONG TO GENERIC !! #}
{# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! #}

<!-- License {-->
<!--
Copyright 2015 Fadri Furrer, ASL, ETH Zurich, Switzerland
Copyright 2015 Michael Burri, ASL, ETH Zurich, Switzerland
Copyright 2015 Mina Kamel, ASL, ETH Zurich, Switzerland
Copyright 2015 Janosch Nikolic, ASL, ETH Zurich, Switzerland
Copyright 2015 Markus Achtelik, ASL, ETH Zurich, Switzerland
Copyright 2022 Vojtech Spurny, MRS, CTU Prague, Czech Republic
Copyright 2024 Petr Stibinger, MRS, CTU Prague, Czech Republic

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--}-->

{# ================================================================== #}
{# ||                   Components using spawner API               || #}
{# ================================================================== #}

{# ground_truth_macro {--> #}
{%- macro ground_truth_macro(parent_link, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-ground-truth' -%}
  {%- set spawner_description = 'Enable ROS topic with ground truth odometry published under model namespace' -%}
  {%- set spawner_default_args = {'topic_name': 'ground_truth', 'frame_name': 'world', 'update_rate': 150} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Ground truth {-->
    {{ generic.odometry_sensor_macro(
      odometry_sensor_name = 'ground_truth',
      parent_link = parent_link,
      topic_name = spawner_args[spawner_keyword]['topic_name'],
      noise = 0,
      frame_name = spawner_args[spawner_keyword]['frame_name'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# propellers_macro {--> #}
{%- macro propellers_macro(prop_list, rotor_velocity_slowdown_sim, motor_constant, moment_constant, parent, mass, radius, time_constant_up, time_constant_down, max_rot_velocity, rotor_drag_coefficient, rolling_moment_coefficient, meshes_z_offset, use_mrs_plugin, prop_ixx, prop_ixy, prop_ixz, prop_iyy, prop_iyz, prop_izz, spawner_args) -%}

  {%- set spawner_keyword = 'disable-motor-crash' -%}
  {%- set spawner_description = 'Disables motor failure after a crash with the environment.' -%}
  {%- set spawner_default_args = none -%}

  {%- set enable_motor_crash = spawner_args[spawner_keyword] is undefined -%}

  {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

  {%- if use_mrs_plugin -%}
    {%- set motor_plugin_filename = "libMrsGazeboCommonResources_MotorPropModelPlugin.so" -%}
  {%- else -%}
    {%- set motor_plugin_filename = "libgazebo_motor_model.so" -%}
  {%- endif -%}

  <!-- Propellers {-->
  {%- for prop_params in prop_list -%}

    {%- if prop_params['mesh_files'] | length == 1 -%}
      <!-- Propeller {{ prop_params['motor_number'] }} {-->
      {{ generic.prop_macro(
        direction = prop_params['direction'],
        rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
        motor_constant = motor_constant,
        moment_constant = moment_constant,
        parent = parent,
        mass = mass,
        radius = radius,
        time_constant_up = time_constant_up,
        time_constant_down = time_constant_down,
        max_rot_velocity = max_rot_velocity,
        motor_number = prop_params['motor_number'],
        rotor_drag_coefficient = rotor_drag_coefficient,
        rolling_moment_coefficient = rolling_moment_coefficient,
        enable_motor_crash = enable_motor_crash,
        color = prop_params['color'],
        mesh_file = prop_params['mesh_files'][0],
        mesh_scale = prop_params['mesh_scale'],
        motor_plugin_filename = motor_plugin_filename,
        x = prop_params['x'],
        y = prop_params['y'],
        z = prop_params['z'],
        roll = 0,
        pitch = 0,
        yaw = 0,
        ixx = prop_ixx,
        ixy = prop_ixy,
        ixz = prop_ixz,
        iyy = prop_iyy,
        iyz = prop_iyz,
        izz = prop_izz)
      }}
      <!--}-->
    {%- elif prop_params['mesh_files'] | length == 2 -%}
      <!-- Propeller {{ prop_params['motor_number'] }} {-->
      {{ generic.prop_macro_2_meshes(
        direction = prop_params['direction'],
        rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
        motor_constant = motor_constant,
        moment_constant = moment_constant,
        parent = parent,
        mass = mass,
        radius = radius,
        time_constant_up = time_constant_up,
        time_constant_down = time_constant_down,
        max_rot_velocity = max_rot_velocity,
        motor_number = prop_params['motor_number'],
        rotor_drag_coefficient = rotor_drag_coefficient,
        rolling_moment_coefficient = rolling_moment_coefficient,
        enable_motor_crash = enable_motor_crash,
        color = prop_params['color'],
        mesh_file_1 = prop_params['mesh_files'][0],
        mesh_file_2 = prop_params['mesh_files'][1],
        meshes_z_offset = meshes_z_offset,
        mesh_scale = prop_params['mesh_scale'],
        motor_plugin_filename = motor_plugin_filename,
        x = prop_params['x'],
        y = prop_params['y'],
        z = prop_params['z'],
        roll = 0,
        pitch = 0,
        yaw = 0,
        ixx = prop_ixx,
        ixy = prop_ixy,
        ixz = prop_ixz,
        iyy = prop_iyy,
        iyz = prop_iyz,
        izz = prop_izz)
      }}
      <!--}-->
    {%- endif -%}

  {%- endfor -%}
  <!--}-->

{%- endmacro -%}
{# <!--}--> #}

{# ======================= rangefinder sensors ====================== #}

{# garmin_down_macro (connected through pixhawk) {--> #}
{%- macro garmin_down_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-rangefinder' -%}
  {%- set spawner_description = 'Add a laser rangefinder (Garmin LIDAR-Lite v3) pointing down. Creates a Gazebo publisher for gazebo_mavlink_interface. ROS topic must be created by mavros. Do not set range outside <0.06 - 40.0> (unrealistic)' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'min_range': 0.1, 'max_range': 36.0, 'noise': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set sensor_name = 'lidar0' -%}

    <!-- garmin down {-->

    <!-- sensor {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>

      {{ generic.zero_inertial_macro() }}

      {{ generic.visual_mesh_macro(
        name = sensor_name,
        mesh_file = 'model://mrs_robots_description/meshes/sensors/garmin_lidar_v3.stl',
        mesh_scale = '0.001 0.001 0.001',
        color = 'DarkGrey',
        x = 0.015,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.gazebo_rangefinder_sensor_macro(
        name = sensor_name,
        parent_frame_name = spawner_args['name'] + '/fcu',
        sensor_frame_name = spawner_args['name'] + '/garmin',
        topic = sensor_name,
        update_rate = spawner_args[spawner_keyword]['update_rate'],
        samples = 1,
        fov = 0.03,
        min_distance = spawner_args[spawner_keyword]['min_range'],
        max_distance = spawner_args[spawner_keyword]['max_range'],
        resolution = 0.005,
        noise = spawner_args[spawner_keyword]['noise'],
        x = x,
        y = y,
        z = z,
        roll = roll,
        pitch = pitch,
        yaw = yaw)
      }}

    </link>

    <!-- NOTE: this joint is required by gazebo_mavlink_interface
      It looks for a joint named ("lidar" + number) or a nested model named ("lidar" + number)
    -->
    <joint name='{{ sensor_name }}_joint' type='fixed'>
      <child>{{ sensor_name }}_link</child>
      <parent>{{ parent_link }}</parent>
    </joint>
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# garmin_down_external_macro (external -> connected to computer) {--> #}
{%- macro garmin_down_external_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-rangefinder-external' -%}
  {%- set spawner_description = 'Add a laser rangefinder (Garmin LIDAR-Lite v3) pointing down. Creates a ROS topic /robot_name/garmin/range. Do not set range outside <0.06 - 40.0> (unrealistic)' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'min_range': 0.1, 'max_range': 36.0, 'noise': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set sensor_name = 'garmin' -%}

    <!-- garmin down {-->

    <!-- sensor {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>

      {{ generic.zero_inertial_macro() }}

      {{ generic.visual_mesh_macro(
        name = sensor_name,
        mesh_file = 'model://mrs_robots_description/meshes/sensors/garmin_lidar_v3.stl',
        mesh_scale = '0.001 0.001 0.001',
        color = 'DarkGrey',
        x = 0.015,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.rangefinder_sensor_macro(
        name = sensor_name,
        parent_frame_name = spawner_args['name'] + '/fcu',
        sensor_frame_name = spawner_args['name'] + '/' + sensor_name,
        topic = sensor_name + '/range',
        update_rate = spawner_args[spawner_keyword]['update_rate'],
        samples = 1,
        fov = 0.03,
        min_distance = spawner_args[spawner_keyword]['min_range'],
        max_distance = spawner_args[spawner_keyword]['max_range'],
        resolution = 0.005,
        noise = spawner_args[spawner_keyword]['noise'],
        x = x,
        y = y,
        z = z,
        roll = roll,
        pitch = pitch,
        yaw = yaw)
      }}

    </link>

    <!-- NOTE: this joint is required by gazebo_mavlink_interface
      It looks for a joint named ("lidar" + number) or a nested model named ("lidar" + number)
    -->
    <joint name='{{ sensor_name }}_joint' type='fixed'>
      <child>{{ sensor_name }}_link</child>
      <parent>{{ parent_link }}</parent>
    </joint>
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# garmin_up_external_macro (external -> connected to computer) {--> #}
{%- macro garmin_up_external_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-rangefinder-up' -%}
  {%- set spawner_description = 'Add a laser rangefinder (Garmin LIDAR-Lite v3) pointing up. Creates a ROS topic /robot_name/garmin/range. Do not set range outside <0.06 - 40.0> (unrealistic)' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'min_range': 0.1, 'max_range': 36.0, 'noise': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set sensor_name = 'garmin_up' -%}

    <!-- garmin down {-->

    <!-- sensor {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>

      {{ generic.zero_inertial_macro() }}

      {{ generic.visual_mesh_macro(
        name = sensor_name,
        mesh_file = 'model://mrs_robots_description/meshes/sensors/garmin_lidar_v3.stl',
        mesh_scale = '0.001 0.001 0.001',
        color = 'DarkGrey',
        x = 0.015,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.rangefinder_sensor_macro(
        name = sensor_name,
        parent_frame_name = spawner_args['name'] + '/fcu',
        sensor_frame_name = spawner_args['name'] + '/' + sensor_name,
        topic = sensor_name + '/range',
        update_rate = spawner_args[spawner_keyword]['update_rate'],
        samples = 1,
        fov = 0.03,
        min_distance = spawner_args[spawner_keyword]['min_range'],
        max_distance = spawner_args[spawner_keyword]['max_range'],
        resolution = 0.005,
        noise = spawner_args[spawner_keyword]['noise'],
        x = x,
        y = y,
        z = z,
        roll = roll,
        pitch = pitch,
        yaw = yaw)
      }}

    </link>

    <!-- NOTE: this joint is required by gazebo_mavlink_interface
      It looks for a joint named ("lidar" + number) or a nested model named ("lidar" + number)
    -->
    <joint name='{{ sensor_name }}_joint' type='fixed'>
      <child>{{ sensor_name }}_link</child>
      <parent>{{ parent_link }}</parent>
    </joint>
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# teraranger_macro {--> #}
{%- macro teraranger_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-teraranger' -%}
  {%- set spawner_description = 'Add a laser rangefinder (Teraranger One) pointing down' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'min_range': 0.1, 'max_range': 14.0, 'noise': 0.04} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set sensor_name = 'teraranger' -%}

    <!-- Teraranger One {-->

    <!-- sensor {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro(sensor_name, 0.015, 0.027, 0.033, 'Yellow', 0, 0, 0, 0, 0, 0) }}
      {{ generic.rangefinder_sensor_macro(
        name = sensor_name,
        parent_frame_name = spawner_args['name'] + '/fcu',
        sensor_frame_name = spawner_args['name'] + '/' + sensor_name,
        topic = sensor_name + '/range',
        update_rate = spawner_args[spawner_keyword]['update_rate'],
        samples = 1,
        fov = 0.03,
        min_distance = spawner_args[spawner_keyword]['min_range'],
        max_distance = spawner_args[spawner_keyword]['max_range'],
        resolution = 0.005,
        noise = spawner_args[spawner_keyword]['noise'],
        x = x,
        y = y,
        z = z,
        roll = roll,
        pitch = pitch,
        yaw = yaw)
      }}
    </link>

    <joint name="{{ sensor_name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_name}}_link</child>
    </joint>
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# teraranger_evo_tower_macro {--> #}
{%- macro teraranger_evo_tower_macro(parent_link, visualize, frame_name, parent_frame_name, gaussian_noise, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-teraranger-evo-tower' -%}
  {%- set spawner_description = 'Add the Teraranger Evo Tower laser scanner to the vehicle' -%}
  {%- set spawner_default_args = none -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {# -- parameters of sensors -- (id, x, y, z, roll, pitch, yaw) #}
    {%- set sensor_parameters = [(0,  0.046,  0.0,   0.001, 0.0, 0.0,  0.0),
                                 (1,  0.032,  0.032, 0.001, 0.0, 0.0,  math.radians(45)),
                                 (2,  0.000,  0.046, 0.001, 0.0, 0.0,  math.radians(90)),
                                 (3, -0.032,  0.032, 0.001, 0.0, 0.0,  math.radians(135)),
                                 (4, -0.046,  0.000, 0.001, 0.0, 0.0,  math.radians(180)),
                                 (5, -0.032, -0.032, 0.001, 0.0, 0.0, -math.radians(135)),
                                 (6,  0.000, -0.046, 0.001, 0.0, 0.0, -math.radians(90)),
                                 (7,  0.032, -0.032, 0.001, 0.0, 0.0, -math.radians(45))] -%}

    <!-- Teraranger Evo Tower {-->
    <link name="teraranger_evo_tower_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      <visual name="visual">
        <pose>0 0 -0.014 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.001</length>
            <radius>0.06</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>

      {%- for id_, x_, y_, z_, roll_, pitch_, yaw_ in sensor_parameters -%}
        <!-- teraranger sensor {{ id_ }} {-->
        {{ generic.teraranger_evo_macro(
          parent_link = parent_link,
          id = id_,
          visualize = visualize,
          frame_name = frame_name,
          parent_frame_name = parent_frame_name,
          gaussian_noise = gaussian_noise,
          x = x_,
          y = y_,
          z = z_,
          roll = roll_,
          pitch = pitch_,
          yaw = yaw_)
        }}
        <!--}-->
      {%- endfor -%}
    </link>

    <joint name="teraranger_evo_tower_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>teraranger_evo_tower_link</child>
    </joint>
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ========================== LIDAR sensors ========================= #}

{# rplidar_macro {--> #}
{%- macro rplidar_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-rplidar' -%}
  {%- set spawner_description = 'Add the RPlidar A3 laser scanner. Do not set range outside <0.10 - 15.0> (unrealistic)' -%}
  {%- set spawner_default_args = {'horizontal_samples': 1600, 'update_rate': 20.0, 'min_range': 0.15, 'max_range': 14.0, 'noise': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set sensor_name = 'rplidar' -%}

    <!-- rplidar A3 {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}

      <!-- visuals {-->
      {{ generic.visual_mesh_macro(
        name = 'base_visual',
        mesh_file = 'model://mrs_robots_description/meshes/sensors/rplidar.stl',
        mesh_scale = '0.001 0.001 0.001',
        color = 'FlatBlack',
        x = 0,
        y = 0,
        z = -0.029,
        roll = 0,
        pitch = 0,
        yaw = math.radians(180))
      }}
      <visual name="purple_visual">
        <pose>0 0 -0.011 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.001</length>
            <radius>0.038</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Purple</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <!--}-->

      <!-- sensor {-->
      <sensor name='{{ sensor_name }}_sensor' type='ray'>
        <visualize>false</visualize>
        <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>{{ spawner_args[spawner_keyword]['horizontal_samples'] | int }}</samples>
              <resolution>1</resolution>
              <min_angle>-3.1241390751</min_angle>
              <max_angle>3.1241390751</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>{{ spawner_args[spawner_keyword]['min_range'] }}</min>
            <max>{{ spawner_args[spawner_keyword]['max_range'] }}</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>{{ spawner_args[spawner_keyword]['noise'] }}</stddev>
          </noise>
        </ray>
        <plugin name='{{ sensor_name }}_plugin' filename='libMrsGazeboCommonResources_2DLidarPlugin.so'>
          <topicName>{{ sensor_name }}/scan</topicName>
          <frameName>{{ spawner_args['name'] }}/{{ sensor_name }}</frameName>
          <parentFrameName>{{ spawner_args['name'] }}/fcu</parentFrameName>
          <x>{{ x }}</x>
          <y>{{ y }}</y>
          <z>{{ z }}</z>
          <roll>{{ roll }}</roll>
          <pitch>{{ pitch }}</pitch>
          <yaw>{{ yaw }}</yaw>
        </plugin>
      </sensor>
      <!--}-->

    </link>

    <joint name="{{ sensor_name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_name }}_link</child>
    </joint>

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# scanse_sweep_macro {--> #}
{%- macro scanse_sweep_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-scanse-sweep' -%}
  {%- set spawner_description = 'Add the Scanse Sweep laser scanner' -%}
  {%- set spawner_default_args = {'horizontal_samples': 500, 'update_rate': 10.0, 'min_range': 0.45, 'max_range': 10.0, 'noise': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- scanse sweep {-->
    <link name="sweeper_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}

      <!-- visuals {-->
      <visual name="base_visual">
        <pose>0 0 -0.031 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.0255</length>
            <radius>0.0234</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/DarkGrey</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name="rotator_visual">
        <geometry>
          <cylinder>
            <length>0.0385</length>
            <radius>0.0325</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/DarkGrey</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <!--}-->

      <!-- sensor {-->
      <sensor name='sweeper_sensor' type='ray'>
        <visualize>false</visualize>
        <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>{{ spawner_args[spawner_keyword]['horizontal_samples'] | int }}</samples>
              <resolution>1</resolution>
              <min_angle>0</min_angle>
              <max_angle>6.283185</max_angle>
            </horizontal>
          </scan>
          <range>
            <min>{{ spawner_args[spawner_keyword]['min_range'] }}</min>
            <max>{{ spawner_args[spawner_keyword]['max_range'] }}</max>
            <resolution>0.01</resolution>
          </range>
          <noise>
            <type>gaussian</type>
            <mean>0.0</mean>
            <stddev>{{ spawner_args[spawner_keyword]['noise'] }}</stddev>
          </noise>
        </ray>
        <plugin name='sweeper_plugin' filename='libMrsGazeboCommonResources_2DLidarPlugin.so'>
          <topicName>scanse_sweep/range</topicName>
          <frameName>{{ spawner_args['name'] }}/scanse_sweep</frameName>
          <parentFrameName>{{ spawner_args['name'] }}/fcu</parentFrameName>
          <x>{{ x }}</x>
          <y>{{ y }}</y>
          <z>{{ z }}</z>
          <roll>{{ roll }}</roll>
          <pitch>{{ pitch }}</pitch>
          <yaw>{{ yaw }}</yaw>
        </plugin>
      </sensor>
      <!--}-->

    </link>

    <joint name="sweeper_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>sweeper_link</child>
    </joint>

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ouster_macro {--> #}
{%- macro ouster_macro(parent_link, sensor_name, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-ouster' -%}
  {%- set spawner_description = 'Add Ouster laser scanner to the vehicle. Select a model to automatically set number of lines, vertical FOV and range. Available models: OS0-32, OS0-64, OS0-128, OS1-16, OS1-32G1, OS1-32, OS1-64, OS1-128, OS2-32, OS2-64, OS2-128' -%}
  {%- set spawner_default_args = {'model': 'OS1-16', 'horizontal_samples': 2048, 'update_rate': 10, 'noise': 0.03, 'use_gpu': false} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {# model selection {--> #}
    {%- set ouster_model = spawner_args[spawner_keyword]['model'] -%}

    {# OS0 {--> #}

    {# OS0-32 #}
    {%- if ouster_model == 'OS0-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# OS0-64 #}
    {%- if ouster_model == 'OS0-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# OS0-128 #}
    {%- if ouster_model == 'OS0-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 90 -%}
      {%- set range = 55 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# OS1 Generation 1 {--> #}
    {# <!-- OS1-16 Generation 1 --> #}
    {%- if ouster_model == 'OS1-16' -%}
      {%- set lasers = 16 -%}
      {%- set vfov_angle = 33.2 -%}
      {%- set range = 120 -%}
    {%- endif -%}
    {# <!--}--> #}

    {# OS1 Generation 2 {--> #}

    {# OS1-32 Generation 2 #}
    {%- if ouster_model == 'OS1-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# OS1-64 Generation 2 #}
    {%- if ouster_model == 'OS1-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# OS1-128 Generation 2 #}
    {%- if ouster_model == 'OS1-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 45 -%}
      {%- set range = 120 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# OS2 {--> #}

    {# OS2-32 #}
    {%- if ouster_model == 'OS2-32' -%}
      {%- set lasers = 32 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# OS2-64 #}
    {%- if ouster_model == 'OS2-64' -%}
      {%- set lasers = 64 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# OS2-128 #}
    {%- if ouster_model == 'OS2-128' -%}
      {%- set lasers = 128 -%}
      {%- set vfov_angle = 22.5 -%}
      {%- set range = 240 -%}
    {%- endif -%}

    {# <!--}--> #}

    {# <!--}--> #}

    {# The real ouster is transforming lidar data from lidar_frame to sensor_frame directly for user. #}
    {# For simplicity, we are placing sensor_frame to the same place as the lidar_frame is. #}

    {# setup local variables {--> #}

    {# -- gazebo links -- #}
    {%- set sensor_link = sensor_name + '_sensor_link' -%}

    {# -- frame names -- #}
    {%- set frame_fcu = spawner_args['name'] + '/fcu' -%}
    {%- set frame_sensor = spawner_args['name'] + '/' + sensor_name + '_sensor' -%}
    {%- set frame_lidar = spawner_args['name'] + '/' + sensor_name + '_lidar'  -%}
    {%- set frame_imu = spawner_args['name'] + '/' + sensor_name + '_imu'  -%}

    {# -- topics -- #}
    {%- set topic_lidar = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/points' -%}
    {%- set topic_imu = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/imu' -%}
    {%- set topic_diag = '/' + spawner_args['name'] + '/' + sensor_name + '_cloud_nodelet/is_alive' -%}

    {# -- tf from sensor to lidar -- #}
    {%- set lidar_x = 0 -%}
    {%- set lidar_y = 0 -%}
    {%- set lidar_z = 0.0344 -%}
    {%- set lidar_roll = 0 -%}
    {%- set lidar_pitch = 0 -%}
    {%- set lidar_yaw = 0 -%}

    {# -- tf from sensor to imu -- #}
    {%- set imu_x = 0.006253 -%}
    {%- set imu_y = -0.011775 -%}
    {%- set imu_z = 0.007645 -%}
    {%- set imu_roll = 0 -%}
    {%- set imu_pitch = 0 -%}
    {%- set imu_yaw = 0 -%}

    {%- if spawner_args[spawner_keyword]['use_gpu'] -%}
      {%- set ouster_plugin_filename ='libMrsGazeboCommonResources_3DLidarGpuPlugin.so' -%}
      {%- set sensor_type = 'gpu_ray'  -%}
    {%- else -%}
      {%- set ouster_plugin_filename ='libMrsGazeboCommonResources_3DLidarPlugin.so' -%}
      {%- set sensor_type = 'ray'  -%}
    {%- endif -%}

    {# <!--}--> #}

    <!-- Ouster {{ ouster_model }} {-->
    <link name="{{ sensor_link }}">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}

      <!-- visuals {-->
      {{ generic.visual_mesh_macro(
        name = 'base_visual',
        mesh_file = 'model://mrs_robots_description/meshes/sensors/os1_64.dae',
        mesh_scale = '1 1 1',
        color = 'White',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <visual name="window_visual">
        <pose>0 0 {{ lidar_z }} 0 0 </pose>
        <geometry>
          <cylinder>
            <length>0.035</length>
            <radius>0.038</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <!--}-->

      <!-- IMU {-->
      <sensor name="{{ sensor_name }}_imu_sensor" type="imu">
        <pose>{{ imu_x }} {{ imu_y }} {{ imu_z }} {{ imu_roll }} {{ imu_pitch }} {{ imu_yaw }}</pose>
        <gravity>true</gravity>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>false</visualize>
        <topic>__default_topic__</topic>
        <plugin name="{{ sensor_name }}_imu_plugin" filename="libgazebo_ros_imu_sensor.so">
          <robotNamespace></robotNamespace>
          <topicName>{{ topic_imu }}</topicName>
          <bodyName>{{ sensor_link }}</bodyName>
          <updateRateHZ>100</updateRateHZ>
          <gaussianNoise>0.005</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <frameName>{{ frame_imu }}</frameName>
        </plugin>
      </sensor>
      <!--}-->

      <!-- LIDAR {-->
      <sensor name="{{ sensor_name }}_lidar_sensor" type="{{ sensor_type }}">
        <pose>{{ lidar_x }} {{ lidar_y }} {{ lidar_z }} {{ lidar_roll }} {{ lidar_pitch }} {{ lidar_yaw }}</pose>
        <visualize>false</visualize>
        <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>{{ spawner_args[spawner_keyword]['horizontal_samples'] }}</samples>
              <resolution>1</resolution>
              <min_angle>0</min_angle>
              <max_angle>{{ 2*math.pi }}</max_angle>
            </horizontal>
            <vertical>
              <samples>{{ lasers }}</samples>
              <resolution>1</resolution>
              <min_angle>{{ -vfov_angle/2*math.radians(180)/180.0 }}</min_angle>
              <max_angle>{{ vfov_angle/2*math.radians(180)/180.0 }}</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.1</min>
            <max>{{ range }}</max>
            <resolution>0.03</resolution>
          </range>
        </ray>
        <plugin name="{{ sensor_name }}_lidar_plugin" filename="{{ ouster_plugin_filename }}">
          <parentFrameName>{{ frame_fcu }}</parentFrameName>
          <sensorFrameName>{{ frame_sensor }}</sensorFrameName>
          <sensor_x>{{ x + lidar_x }}</sensor_x>
          <sensor_y>{{ y + lidar_y }}</sensor_y>
          <sensor_z>{{ z + lidar_z }}</sensor_z>
          <sensor_roll>{{ roll + lidar_roll }}</sensor_roll>
          <sensor_pitch>{{ pitch + lidar_pitch }}</sensor_pitch>
          <sensor_yaw>{{ yaw + lidar_yaw }}</sensor_yaw>

          <!-- Lidar parameters -->
          <lidarFrameName>{{ frame_lidar }}</lidarFrameName>
          <lidar_x>0</lidar_x>
          <lidar_y>0</lidar_y>
          <lidar_z>0</lidar_z>
          <lidar_roll>0</lidar_roll>
          <lidar_pitch>0</lidar_pitch>
          <lidar_yaw>{{ math.radians(180) }}</lidar_yaw>
          <topicName>{{ topic_lidar }}</topicName>
          <topicDiagName>{{ topic_diag }}</topicDiagName>
          <min_range>0.1</min_range>
          <max_range>{{ range }}</max_range>
          <ordered>true</ordered>
          <gaussianNoise>{{ spawner_args[spawner_keyword]['noise'] }}</gaussianNoise>

          <!-- IMU parameters -->
          <imu>true</imu>
          <imuFrameName>{{ frame_imu }}</imuFrameName>
          <imu_x>{{ imu_x - lidar_x }}</imu_x>
          <imu_y>{{ imu_y - lidar_y }}</imu_y>
          <imu_z>{{ imu_z - lidar_z }}</imu_z>
          <imu_roll>{{ imu_roll - lidar_roll }}</imu_roll>
          <imu_pitch>{{ imu_pitch - lidar_pitch }}</imu_pitch>
          <imu_yaw>{{ imu_yaw - lidar_yaw }}</imu_yaw>
        </plugin>
      </sensor>
      <!--}-->

    </link>

    <joint name="{{ sensor_name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_link }}</child>
    </joint>

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# velodyne_macro {--> #}
{%- macro velodyne_macro(parent_link, sensor_name, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-velodyne' -%}
  {%- set spawner_description = 'Add Velodyne PUCK laser scanner to the vehicle' -%}
  {%- set spawner_default_args = {'horizontal_samples': 3600, 'lasers': 16, 'noise': 0.01, 'range': 100, 'vfov': 30, 'update_rate': 20, 'use_gpu': false} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {# setup local variables {--> #}

    {# The real ouster is transforming lidar data from lidar_frame to sensor_frame directly for user. #}
    {# For simplicity, we are placing sensor_frame to the same place as the lidar_frame is. #}
    {# Velodyne macro is using the same plugin as ouster macro. Therefore we need to render data in the same way. #}

    {# -- frame names -- #}
    {%- set frame_fcu = spawner_args['name'] + '/fcu' -%}
    {%- set frame_sensor = spawner_args['name'] + '/' + sensor_name + '_sensor' -%}
    {%- set frame_lidar = spawner_args['name'] + '/' + sensor_name  -%}

    {# -- topics -- #}
    {%- set topic_lidar = '/' + spawner_args['name'] + '/' + sensor_name + '/scan' -%}
    {%- set topic_diag = '/' + spawner_args['name'] + '/' + sensor_name + '/is_alive' -%}

    {# -- tf from sensor to lidar -- #}
    {# The laser rays should be coming approximately from the half of sensor height #}
    {%- set lidar_x = 0 -%}
    {%- set lidar_y = 0 -%}
    {%- set lidar_z = 0.037725 -%}
    {%- set lidar_roll = 0 -%}
    {%- set lidar_pitch = 0 -%}
    {%- set lidar_yaw = 0  -%}

    {%- if spawner_args[spawner_keyword]['use_gpu'] -%}
      {%- set velodyne_plugin_filename ='libMrsGazeboCommonResources_3DLidarGpuPlugin.so' -%}
      {%- set sensor_type = 'gpu_ray'  -%}
    {%- else -%}
      {%- set velodyne_plugin_filename ='libMrsGazeboCommonResources_3DLidarPlugin.so' -%}
      {%- set sensor_type = 'ray'  -%}
    {%- endif -%}
    {# <!--}--> #}

    <!-- Velodyne PUCK {-->
    <link name="velodyne_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}

      <!-- visuals {-->
      <visual name="base_visual">
        <pose>0 0 0.0094 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.0188</length>
            <radius>0.062</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/FlatBlack</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name="top_visual">
        <pose>0 0 0.0643 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.0148</length>
            <radius>0.062</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/FlatBlack</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <visual name="window_visual">
        <pose>0 0 0.03785 0 0 0</pose>
        <geometry>
          <cylinder>
            <length>0.0381</length>
            <radius>0.058</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/Blue</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <!--}-->

      <!-- sensor {-->
      <sensor name="{{ sensor_name }}_lidar_sensor" type="{{ sensor_type }}">
        <pose>{{ lidar_x }} {{ lidar_y }} {{ lidar_z }} {{ lidar_roll }} {{ lidar_pitch }} {{ lidar_yaw }}</pose>
        {# <pose>0 0 0 0 0 0</pose> #}
        <visualize>false</visualize>
        <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
        <ray>
          <scan>
            <horizontal>
              <samples>{{ spawner_args[spawner_keyword]['horizontal_samples'] }}</samples>
              <resolution>1</resolution>
              <min_angle>{{ -math.radians(180) }}</min_angle>
              <max_angle>{{ math.radians(180) }}</max_angle>
            </horizontal>
            <vertical>
              <samples>{{ spawner_args[spawner_keyword]['lasers'] }}</samples>
              <resolution>1</resolution>
              <min_angle>{{ -spawner_args[spawner_keyword]['vfov']/2*math.radians(180)/180.0 }}</min_angle>
              <max_angle>{{ spawner_args[spawner_keyword]['vfov']/2*math.radians(180)/180.0 }}</max_angle>
            </vertical>
          </scan>
          <range>
            <min>0.1</min>
            <max>{{ spawner_args[spawner_keyword]['range'] }}</max>
            <resolution>0.03</resolution>
          </range>
        </ray>
        <plugin name="{{ sensor_name }}_lidar_plugin" filename="{{ velodyne_plugin_filename }}">
          <parentFrameName>{{ frame_fcu }}</parentFrameName>
          <sensorFrameName>{{ frame_sensor }}</sensorFrameName>
          <sensor_x>{{ x + lidar_x }}</sensor_x>
          <sensor_y>{{ y + lidar_y }}</sensor_y>
          <sensor_z>{{ z + lidar_z }}</sensor_z>
          <sensor_roll>{{ roll }}</sensor_roll>
          <sensor_pitch>{{ pitch }}</sensor_pitch>
          <sensor_yaw>{{ yaw }}</sensor_yaw>
          <lidar_x>0</lidar_x>
          <lidar_y>0</lidar_y>
          <lidar_z>0</lidar_z>
          <lidar_roll>{{ lidar_roll }}</lidar_roll>
          <lidar_pitch>{{ lidar_pitch }}</lidar_pitch>
          <lidar_yaw>{{ lidar_yaw }}</lidar_yaw>
          <topicName>{{ topic_lidar }}</topicName>
          <topicDiagName>{{ topic_diag }}</topicDiagName>
          <lidarFrameName>{{ frame_lidar }}</lidarFrameName>
          <min_range>0.1</min_range>
          <max_range>{{ spawner_args[spawner_keyword]['range'] }}</max_range>
          <gaussianNoise>{{ spawner_args[spawner_keyword]['noise'] }}</gaussianNoise>
          <imu>false</imu>
        </plugin>
      </sensor>
      <!--}-->

    </link>

    <joint name="velodyne_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>velodyne_link</child>
    </joint>

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ============================= cameras ============================ #}

{# realsense_top_macro {--> #}
{%- macro realsense_top_macro(camera_name, camera_suffix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-realsense-top' -%}
  {%- set spawner_description = 'Add Intel Realsense D435 depth camera to the vehicle [1280x720 @ 30hz], pointed forward, placed on an aluminum frame above the body' -%}
  {%- set spawner_default_args = {'realistic': False, 'update_rate': 30} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Realsense front {-->

    <!-- sensor {-->
    {{ generic.realsense_d435_macro(
      namespace = spawner_args['name'],
      camera_name = camera_name,
      camera_suffix = camera_suffix,
      parent_link = parent_link,
      realistic = spawner_args[spawner_keyword]['realistic'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# realsense_front_macro {--> #}
{%- macro realsense_front_macro(camera_name, camera_suffix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-realsense-front' -%}
  {%- set spawner_description = 'Add Intel Realsense D435 depth camera to the vehicle [1280x720 @ 30hz], pointed forward placed on the front holder between the legs' -%}
  {%- set spawner_default_args = {'realistic': False, 'update_rate': 30} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Realsense front {-->

    <!-- sensor {-->
    {{ generic.realsense_d435_macro(
      namespace = spawner_args['name'],
      camera_name = camera_name,
      camera_suffix = camera_suffix,
      parent_link = parent_link,
      realistic = spawner_args[spawner_keyword]['realistic'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# realsense_front_pitched_macro {--> #}
{%- macro realsense_front_pitched_macro(camera_name, camera_suffix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-realsense-front-pitched' -%}
  {%- set spawner_description = 'Add Intel Realsense D435 depth camera to the vehicle [1280x720 @ 30hz], pointed forward pitched down by 10-45 deg (angle depends on vehicle model)' -%}
  {%- set spawner_default_args = {'realistic': False, 'update_rate': 30} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Realsense front pitched {-->

    <!-- sensor {-->
    {{ generic.realsense_d435_macro(
      namespace = spawner_args['name'],
      camera_name = camera_name,
      camera_suffix = camera_suffix,
      parent_link = parent_link,
      realistic = spawner_args[spawner_keyword]['realistic'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# realsense_up_macro {--> #}
{%- macro realsense_up_macro(camera_name, camera_suffix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-realsense-up' -%}
  {%- set spawner_description = 'Add Intel Realsense D435 depth camera to the vehicle [1280x720 @ 30hz], pointed upwards' -%}
  {%- set spawner_default_args = {'realistic': False, 'update_rate': 30} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Realsense up {-->

    <!-- sensor {-->
    {{ generic.realsense_d435_macro(
      namespace = spawner_args['name'],
      camera_name = camera_name,
      camera_suffix = camera_suffix,
      parent_link = parent_link,
      realistic = spawner_args[spawner_keyword]['realistic'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# realsense_down_macro {--> #}
{%- macro realsense_down_macro(camera_name, camera_suffix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-realsense-down' -%}
  {%- set spawner_description = 'Add Intel Realsense D435 depth camera to the vehicle [1280x720 @ 30hz], pointed down' -%}
  {%- set spawner_default_args = {'realistic': False, 'update_rate': 30} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Realsense down {-->

    <!-- sensor {-->
    {{ generic.realsense_d435_macro(
      namespace = spawner_args['name'],
      camera_name = camera_name,
      camera_suffix = camera_suffix,
      parent_link = parent_link,
      realistic = spawner_args[spawner_keyword]['realistic'],
      update_rate = spawner_args[spawner_keyword]['update_rate'],
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}

{%- endmacro -%}
{# <!--}--> #}

{# bluefox_camera_macro {--> #}
{%- macro bluefox_camera_macro(camera_name, parent_link, x, y, z, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-bluefox-camera' -%}
  {%- set spawner_description = 'Add bluefox camera to the vehicle [752x480 @ 50hz], pointing down' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- bluefox camera {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + camera_name,
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      horizontal_fov = 2.1,
      image_width = 752,
      image_height = 480,
      min_distance = 0.02,
      max_distance = 80,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# bluefox_camera_reverse_macro {--> #}
{%- macro bluefox_camera_reverse_macro(camera_name, parent_link, x, y, z, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-bluefox-camera-reverse' -%}
  {%- set spawner_description = 'Add bluefox camera to the vehicle [752x480 @ 50hz], pointing down but image is rotated by 180 deg' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- bluefox camera reverse {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + camera_name,
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      horizontal_fov = 2.1,
      image_width = 752,
      image_height = 480,
      min_distance = 0.02,
      max_distance = 80,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = 0,
      pitch = math.radians(90),
      yaw = math.radians(180))
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# bluefox_camera_front_macro {--> #}
{%- macro bluefox_camera_front_macro(camera_name, parent_link, x, y, z, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-bluefox-camera-front' -%}
  {%- set spawner_description = 'Add bluefox camera to the vehicle [752x480 @ 50hz], pointing forward' -%}
  {%- set spawner_default_args = {'update_rate': 100, 'noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- bluefox camera {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + camera_name,
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      horizontal_fov = 2.1,
      image_width = 752,
      image_height = 480,
      min_distance = 0.02,
      max_distance = 80,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# mobius_down_macro {-->#}
{%- macro mobius_down_macro(camera_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-mobius-camera-down' -%}
  {%- set spawner_description = 'Add mobius camera to the vehicle [1280x720 @ 30hz], pointing down' -%}
  {%- set spawner_default_args = {'update_rate': 30, 'noise': 0.007} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Mobius down {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      sensor_base_frame_name = spawner_args['name']  + '/' + camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      horizontal_fov = 2.28638,
      image_width = 1280,
      image_height = 720,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/mobius.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = -0.004,
      visual_y = 0.0045,
      visual_z = 0,
      visual_roll = 0,
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# mobius_front_macro {-->#}
{%- macro mobius_front_macro(camera_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-mobius-camera-front' -%}
  {%- set spawner_description = 'Add mobius camera to the vehicle [1280x720 @ 30hz], pointing forward' -%}
  {%- set spawner_default_args = {'update_rate': 30, 'noise': 0.007} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Mobius front {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      sensor_base_frame_name = spawner_args['name']  + '/' + camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      horizontal_fov = 2.28638,
      image_width = 1280,
      image_height = 720,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/mobius.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = -0.004,
      visual_y = 0.0045,
      visual_z = 0,
      visual_roll = 0,
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# mobius_back_left_macro {-->#}
{%- macro mobius_back_left_macro(camera_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-mobius-camera-back-left' -%}
  {%- set spawner_description = 'Add mobius camera to the vehicle [1280x720 @ 30hz], pointing to the back left' -%}
  {%- set spawner_default_args = {'update_rate': 30, 'noise': 0.007} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Mobius back left {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      sensor_base_frame_name = spawner_args['name']  + '/' + camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      horizontal_fov = 2.28638,
      image_width = 1280,
      image_height = 720,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/mobius.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = -0.004,
      visual_y = 0.0045,
      visual_z = 0,
      visual_roll = 0,
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# mobius_back_right_macro {-->#}
{%- macro mobius_back_right_macro(camera_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-mobius-camera-back-right' -%}
  {%- set spawner_description = 'Add mobius camera to the vehicle [1280x720 @ 30hz], pointing to the back right' -%}
  {%- set spawner_default_args = {'update_rate': 30, 'noise': 0.007} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Mobius back right {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      sensor_base_frame_name = spawner_args['name']  + '/' + camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      horizontal_fov = 2.28638,
      image_width = 1280,
      image_height = 720,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/mobius.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = -0.004,
      visual_y = 0.0045,
      visual_z = 0,
      visual_roll = 0,
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# fisheye_bluefox_macro {--> #}
{%- macro fisheye_bluefox_macro(camera_name, topic_ns_prefix, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-fisheye-camera' -%}
  {%- set spawner_description = 'Add a fisheye bluefox camera [752x480 @ 45hz, 180 deg] to the vehicle' -%}
  {%- set spawner_default_args = {'update_rate': 45, 'noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Fisheye bluefox camera {-->

    <!-- sensor {-->
    {{ generic.fisheye_camera_macro(
      camera_name = camera_name,
      topic_ns_prefix = topic_ns_prefix,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + camera_name,
      parent_link = parent_link,
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      horizontal_fov = math.radians(180),
      image_width = 752,
      image_height = 480,
      lens_type = 'custom',
      lens_c1 = 1.05,
      lens_c2 = 4,
      lens_f = 1.0,
      lens_fun = 'tan',
      lens_scale = True,
      lens_cutoff_angle = math.radians(90),
      lens_texture_size = 512,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# servo_camera_macro {--> #}
{%- macro servo_camera_macro(parent, offset_pitch_link_x, offset_pitch_link_y, offset_pitch_link_z, offset_pitch_link_yaw, offset_pitch_link_roll, offset_pitch_link_pitch, offset_roll_link_x, offset_roll_link_y, offset_roll_link_z, offset_roll_link_yaw, offset_roll_link_roll, offset_roll_link_pitch, tilt_update_rate, max_pitch, min_pitch, max_pitch_rate, max_roll, min_roll, max_roll_rate, compensate_tilt_roll, compensate_tilt_pitch, parent_frame_name, sensor_base_frame_name, camera_frame_name, camera_update_rate, horizontal_fov, img_width, img_height, roll_link_mesh_file, pitch_link_mesh_file, mesh_scale, spawner_args) -%}

  {%- set spawner_keyword = 'enable-servo-camera' -%}
  {%- set spawner_description = 'Add a camera on virtual servo to the vehicle' -%}
  {%- set spawner_default_args = none -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Servo camera {-->

    <!-- gimbal visuals {-->
    <link name="servo_camera_gimbal_link">
      <pose relative_to = "servo_camera_roll_joint"> 0 0 0 0 0 0</pose>
      {{ generic.zero_inertial_macro() }}
      <visual name="visual">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          {%- if roll_link_mesh_file == '' -%}
          <box>
            <size>0.01 0.01 0.01</size>
          </box>
          {%- else -%}
          <mesh>
            <uri>{{ roll_link_mesh_file }}</uri>
            <scale>{{ mesh_scale }}</scale>
          </mesh>
          {%- endif -%}
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
    </link>
    <!--}-->

    <!-- sensor {-->
    <link name="servo_camera_link">
      <pose relative_to = "servo_camera_pitch_joint"> 0 0 0 0 0 0</pose>
      {{ generic.zero_inertial_macro() }}
      <visual name="visual">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          {%- if pitch_link_mesh_file == '' -%}
          <box>
            <size>0.01 0.01 0.01</size>
          </box>
          {%- else -%}
          <mesh>
            <uri>{{ pitch_link_mesh_file }}</uri>
            <scale>{{ mesh_scale }}</scale>
          </mesh>
          {%- endif -%}
        </geometry>
        <material>
          <script>
            <name>Gazebo/Black</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
      <sensor name="servo_camera_sensor" type="camera">
        <update_rate>{{ camera_update_rate }}</update_rate>
        <camera>
          <horizontal_fov>{{ horizontal_fov }}</horizontal_fov>
          <image>
            <width>{{ img_width }}</width>
            <height>{{ img_height }}</height>
          </image>
          <clip>
            <near>0.25</near>
            <far>100</far>
          </clip>
          <noise>
            <type>gaussian</type>
              <!-- Noise is sampled independently per pixel on each frame.
                That pixel's noise value is added to each of its color
              channels, which at that point lie in the range [0,1]. -->
            <mean>0.0</mean>
            <stddev>0.01</stddev>
          </noise>
        </camera>
        <plugin name="camera_plugin" filename="libMrsGazeboCommonResources_CameraPlugin.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>{{ camera_update_rate }}</updateRate>
          <cameraName>servo_camera</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>{{ camera_frame_name }}</frameName>
          <hackBaseline>0.0</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
          <x>0.0</x>
          <y>0.0</y>
          <z>0.0</z>
          <roll>0.0</roll>
          <pitch>0.0</pitch>
          <yaw>0.0</yaw>
          <parentFrameName>{{ parent_frame_name }}</parentFrameName>
          <sensorBaseFrameName>{{ sensor_base_frame_name }}</sensorBaseFrameName>
        </plugin>
      </sensor>
    </link>

    <plugin name="servo_camera_plugin" filename="libMrsGazeboCommonResources_ServoCameraPlugin.so">
      <update_rate>{{ tilt_update_rate }}</update_rate>
      <max_pitch_rate>{{ max_pitch_rate }}</max_pitch_rate>
      <max_pitch>{{ max_pitch }}</max_pitch>
      <min_pitch>{{ min_pitch }}</min_pitch>
      <max_roll_rate>{{ max_roll_rate }}</max_roll_rate>
      <max_roll>{{ max_roll }}</max_roll>
      <min_roll>{{ min_roll }}</min_roll>
      <joint_name_pitch>servo_camera_pitch_joint</joint_name_pitch>
      <joint_name_roll>servo_camera_roll_joint</joint_name_roll>
      <parent_link_pitch>servo_camera_gimbal_link</parent_link_pitch>
      <parent_link_roll>{{ parent }}</parent_link_roll>
      <compensate_tilt_roll>{{ compensate_tilt_roll }}</compensate_tilt_roll>
      <compensate_tilt_pitch>{{ compensate_tilt_pitch }}</compensate_tilt_pitch>
    </plugin>
    <!--}-->

    <!-- camera joints {-->
    <joint name="servo_camera_roll_joint" type="revolute">
      <parent>{{ parent }}</parent>
      <child>servo_camera_gimbal_link</child>
      <pose relative_to = "{{ parent }}">{{ offset_roll_link_x }} {{ offset_roll_link_y }} {{ offset_roll_link_z }} {{ offset_roll_link_roll }} {{ offset_roll_link_pitch }} {{ offset_roll_link_yaw }}</pose>
      <axis>
        <xyz>1 0 0</xyz>
        <limit>
          <lower>-0.5</lower>
          <upper>0.5</upper>
          <effort>1</effort>
          <velocity>10</velocity>
        </limit>
        <dynamics>
          <damping>0.0</damping>
          <friction>0.0</friction>
        </dynamics>
      </axis>
    </joint>

    <joint name="servo_camera_pitch_joint" type="revolute">
      <parent>servo_camera_gimbal_link</parent>
      <child>servo_camera_link</child>
      <pose relative_to = "servo_camera_roll_joint">{{ offset_pitch_link_x }} {{ offset_pitch_link_y }} {{ offset_pitch_link_z }} {{ offset_pitch_link_roll }} {{ offset_pitch_link_pitch }} {{ offset_pitch_link_yaw }}</pose>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
          <lower>-1.57</lower>
          <upper>1.57</upper>
          <effort>1</effort>
          <velocity>10</velocity>
        </limit>
        <dynamics>
          <damping>0.0</damping>
          <friction>0.0</friction>
        </dynamics>
      </axis>
    </joint>
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# TODO: Thermal camera plugin is not core #}
{# thermal_cameras_macro {--> #}
{%- macro thermal_cameras_macro(cameras_list, parent_link, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-thermal-cameras' -%}
  {%- set spawner_description = 'Add several thermal cameras to the vehicle' -%}
  {%- set spawner_default_args = {'image_width': 32, 'image_height': 32, 'update_rate': 14} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- if cameras_list | length > 0 -%}
      <!-- Thermal cameras {-->
      {%- for camera in cameras_list -%}
        <!-- Thermal camera {{ camera['name'] }} {-->
        {{ generic.thermal_camera_macro(
          camera_name = camera['name'],
          camera_topic_name = '/' + spawner_args['name'] + '/thermal/' + camera['name'],
          parent_frame_name = spawner_args['name'] + '/fcu',
          camera_frame_name = 'thermal/' + camera['name'] + '_optical',
          sensor_base_frame_name = spawner_args['name'] + '/thermal/' + camera['name'],
          parent_link = parent_link,
          frame_rate = spawner_args[spawner_keyword]['update_rate'],
          hfov = 0.575959,
          image_width = spawner_args[spawner_keyword]['image_width'] | int,
          image_height = spawner_args[spawner_keyword]['image_height'] | int,
          x = camera['x'],
          y = camera['y'],
          z = camera['z'],
          roll = camera['roll'],
          pitch = camera['pitch'],
          yaw = camera['yaw'])
        }}
        <!--}-->
      {%- endfor -%}

      <!-- mount {-->
      {{ mount if mount }}
      <!--}-->

      <!--}-->
    {%- endif -%}

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# basler_camera_down_macro {--> #}
{%- macro basler_camera_down_macro(camera_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-basler-camera-down' -%}
  {%- set spawner_description = 'Add a Basler Dart camera pointing down' -%}
  {%- set spawner_default_args = {'image_width': 1920, 'image_height': 1080, 'update_rate': 30, 'hfov': 1.990252, 'noise': 0.007} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Basler camera down {-->

    <!-- sensor {-->
    {{ generic.camera_macro(
      parent_link = parent_link,
      camera_name = camera_name,
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      sensor_base_frame_name = spawner_args['name']  + '/' + camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      horizontal_fov = spawner_args[spawner_keyword]['hfov'],
      image_width = spawner_args[spawner_keyword]['image_width'],
      image_height = spawner_args[spawner_keyword]['image_height'],
      min_distance = 0.02,
      max_distance = 80,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/basler_dart.stl',
      mesh_scale = '0.001 0.001 0.001',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = 0,
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ========================= UVDAR components ======================= #}

{# dual_uv_cameras_macro {--> #}
{%- macro dual_uv_cameras_macro(parent_link, x1, y1, z1, roll1, pitch1, yaw1, x2, y2, z2, roll2, pitch2, yaw2, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-dual-uv-cameras' -%}
  {%- set spawner_description = 'Add right and left UV cameras to the vehicle. Requires param "calib_file" to be set. Setting param "occlusions" to True requires a BEEFY computer.' -%}
  {%- set spawner_default_args = {'occlusions': False, 'calib_file': none, 'update_rate': 60} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- if spawner_args[spawner_keyword]['calib_file'] is not none -%}
      <!-- Dual UV cameras {-->
      {{ generic.uvcam_macro(
        parent_link = parent_link,
        camera_publish_topic = '/' + spawner_args['name'] + '/uvdar_bluefox_left/image_raw',
        calibration_file = spawner_args[spawner_keyword]['calib_file'],
        occlusions = spawner_args[spawner_keyword]['occlusions'],
        frame_rate = spawner_args[spawner_keyword]['update_rate'],
        device_id = spawner_args['name'] + '_1',
        x = x1,
        y = y1,
        z = z1,
        roll = roll1,
        pitch = pitch1,
        yaw = yaw1)
      }}

      {{ generic.uvcam_macro(
        parent_link = parent_link,
        camera_publish_topic = '/' + spawner_args['name'] + '/uvdar_bluefox_right/image_raw',
        calibration_file = spawner_args[spawner_keyword]['calib_file'],
        occlusions = spawner_args[spawner_keyword]['occlusions'],
        frame_rate = spawner_args[spawner_keyword]['update_rate'],
        device_id = spawner_args['name'] + '_2',
        x = x2,
        y = y2,
        z = z2,
        roll = roll2,
        pitch = pitch2,
        yaw = yaw2)
      }}

      <!-- mount {-->
      {{ mount if mount }}
      <!--}-->

      <!--}-->
    {%- endif -%}

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# back_uv_camera_macro {--> #}
{%- macro back_uv_camera_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-back-uv-camera' -%}
  {%- set spawner_description = 'Add a back UV camera to the vehicle. Requires param "calib_file" to be set' -%}
  {%- set spawner_default_args = {'occlusions': False, 'calib_file': none, 'update_rate': 60} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Back UV camera {-->
    {{ generic.uvcam_macro(
      parent_link = parent_link,
      camera_publish_topic = '/' + spawner_args['name'] + '/uvdar_bluefox_back/image_raw',
      calibration_file = spawner_args[spawner_keyword]['calib_file'],
      occlusions = spawner_args[spawner_keyword]['occlusions'],
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      device_id = spawner_args['name'] + '_3',
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# downward_uv_camera_macro {--> #}
{%- macro downward_uv_camera_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-downward-uv-camera' -%}
  {%- set spawner_description = 'Add a UV camera to the vehicle pointed down. Requires param "calib_file" to be set' -%}
  {%- set spawner_default_args = {'occlusions': False, 'calib_file': none, 'update_rate': 60} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Downward UV camera {-->
    {{ generic.uvcam_macro(
      parent_link = parent_link,
      camera_publish_topic = '/' + spawner_args['name'] + '/uvdar_bluefox_bottom/image_raw',
      calibration_file = spawner_args[spawner_keyword]['calib_file'],
      occlusions = spawner_args[spawner_keyword]['occlusions'],
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      device_id = spawner_args['name'] + '_3',
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# uv_leds_macro {--> #}
{%- macro uv_leds_macro(parent_link, x1, x2, y1, y2, z, spawner_args) -%}

  {%- set spawner_keyword = 'enable-uv-leds' -%}
  {%- set spawner_description = 'Add UV LEDs to the vehicle. Requires param "signal_id" to be set. Legacy params "left_id" and "right_id" may replace "signal_id" (for backwards compatibility)' -%}
  {%- set spawner_default_args = {'signal_id': none, 'left_id': none, 'right_id': none} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}

    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {# setup led signals {--> #}
    {%- if spawner_args[spawner_keyword]['signal_id'] is not none and spawner_args[spawner_keyword]['signal_id'] | length > 3 -%}

      {%- set led1 = spawner_args[spawner_keyword]['signal_id'][0] -%}
      {%- set led2 = spawner_args[spawner_keyword]['signal_id'][1] -%}
      {%- set led4 = spawner_args[spawner_keyword]['signal_id'][3] -%}
      {%- set led3 = spawner_args[spawner_keyword]['signal_id'][2] -%}

    {%- elif spawner_args[spawner_keyword]['left_id'] is not none and spawner_args[spawner_keyword]['right_id'] is not none -%}

      {%- set led1 = spawner_args[spawner_keyword]['left_id'] -%}
      {%- set led2 = spawner_args[spawner_keyword]['right_id'] -%}
      {%- set led3 = spawner_args[spawner_keyword]['left_id'] -%}
      {%- set led4 = spawner_args[spawner_keyword]['right_id'] -%}

    {%- endif -%}
    {# <!--}--> #}

    {%- if led1 is not none and led2 is not none and led3 is not none and led4 is not none -%}

      {# -- leds configuration -- (id, signal_id, x, y, z, roll, pitch, yaw) #}
      {%- set uv_leds_macro_parameters = [(1, led3,  x1,  y1, z, 0.0, math.radians(90),  0.0),
                                          (2, led3,  x2,  y2, z, 0.0, math.radians(90),  math.radians(90)),
                                          (3, led1,  x2, -y2, z, 0.0, math.radians(90), -math.radians(90)),
                                          (4, led1,  x1, -y1, z, 0.0, math.radians(90),  0.0),
                                          (5, led2, -x2,  y2, z, 0.0, math.radians(90),  math.radians(90)),
                                          (6, led2, -x1,  y1, z, 0.0, math.radians(90),  math.radians(180)),
                                          (7, led4, -x1, -y1, z, 0.0, math.radians(90), -math.radians(180)),
                                          (8, led4, -x2, -y2, z, 0.0, math.radians(90), -math.radians(90))] -%}

      <!-- UV LEDs {-->
      {%- for id_, signal_id_, x_, y_, z_, roll_, pitch_, yaw_ in uv_leds_macro_parameters -%}
        <!-- LED {{ id_ }} {-->
        {{ generic.uvled_macro(
          parent_link = parent_link,
          device_id = spawner_args['name'] + '_' + id_ | string(),
          signal_id = signal_id_,
          x = x_,
          y = y_,
          z = z_,
          roll = roll_,
          pitch = pitch_,
          yaw = yaw_)
        }}
        <!--}-->
      {%- endfor -%}
      <!--}-->

    {%- endif -%}

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# uv_leds_beacon_macro {--> #}
{%- macro uv_leds_beacon_macro(parent_link, x1, x2, y1, y2, z, spawner_args) -%}

  {%- set spawner_keyword = 'enable-uv-leds-beacon' -%}
  {%- set spawner_description = 'Add UV LED beacon to the top of the vehicle. Requires param "signal_id" to be set.' -%}
  {%- set spawner_default_args = {'signal_id': none} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}

    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- if spawner_args[spawner_keyword]['signal_id'] is not none -%}

      {# setup led signals {--> #}
      {# -- leds configuration -- (id, signal_id, x, y, z, roll, pitch, yaw) #}
      {%- set uv_leds_macro_parameters = [('b1', spawner_args[spawner_keyword]['signal_id'],  x1, y1, z, 0.0, math.radians(90), 0.0),
                                        ('b2', spawner_args[spawner_keyword]['signal_id'],  x2, y2, z, 0.0, math.radians(90), math.radians(90)),
                                        ('b3', spawner_args[spawner_keyword]['signal_id'], -x1, -y1, z, 0.0, math.radians(90), math.radians(180)),
                                        ('b4', spawner_args[spawner_keyword]['signal_id'], -x2, -y2, z, 0.0, math.radians(90), math.radians(270))] -%}

      {# <!--}--> #}

      {%- for id_, signal_id_, x_, y_, z_, roll_, pitch_, yaw_ in uv_leds_macro_parameters -%}
        <!-- Beacon LED {{ id_ }} {-->
        {{ generic.uvled_macro(
          parent_link = parent_link,
          device_id = spawner_args['name'] + '_' + id_ | string(),
          signal_id = signal_id_,
          x = x_,
          y = y_,
          z = z_,
          roll = roll_,
          pitch = pitch_,
          yaw = yaw_)
        }}
        <!--}-->
      {%- endfor -%}

    {%- endif -%}

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}


{# ========================== VIO components ======================== #}

{# vio_macro {--> #}
{%- macro vio_macro(sensor_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-vio' -%}
  {%- set spawner_description = 'Add a forward-looking fisheye camera and a high-frequency IMU' -%}
  {%- set spawner_default_args = {'camera_rate': 45, 'camera_noise': 0.0, 'imu_rate': 100, 'imu_noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- VIO {-->

    <!-- fisheye camera {-->
    {{ generic.fisheye_camera_macro(
      camera_name = sensor_name,
      topic_ns_prefix = 'camera/',
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + sensor_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + sensor_name,
      parent_link = parent_link,
      frame_rate = spawner_args[spawner_keyword]['camera_rate'],
      horizontal_fov = math.radians(180),
      image_width = 752,
      image_height = 480,
      lens_type = 'custom',
      lens_c1 = 1.05,
      lens_c2 = 4,
      lens_f = 1.0,
      lens_fun = 'tan',
      lens_scale = True,
      lens_cutoff_angle = math.radians(90),
      lens_texture_size = 512,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['camera_noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- imu {-->
    {{ generic.imu_sensor_macro(
      sensor_name = sensor_name + '_imu',
      parent_link = sensor_name + '_link',
      update_rate = spawner_args[spawner_keyword]['imu_rate'],
      topic_name = '/' + spawner_args['name'] + '/' + sensor_name + '/imu',
      frame_name = spawner_args['name'] + '/' + sensor_name + '_imu',
      noise_mean = spawner_args[spawner_keyword]['imu_noise'],
      x = 0,
      y = 0,
      z = 0,
      roll = -math.radians(90),
      pitch = 0,
      yaw = -math.radians(90))
    }}
    <!--}-->

    <!-- static tf {-->
  {{ generic.tf_static_macro(
     namespace = spawner_args['name'] + '/',
     parent_link = sensor_name + "_link",
     child_link = sensor_name + "_imu_link")
  }}
  {# <!--}--> #}

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# vio_down_macro {--> #}
{%- macro vio_down_macro(sensor_name, parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-vio-down' -%}
  {%- set spawner_description = 'Add a downward-looking fisheye camera and a high-frequency IMU' -%}
  {%- set spawner_default_args = {'camera_rate': 45, 'camera_noise': 0.0, 'imu_rate': 100, 'imu_noise': 0.0} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- VIO down {-->

    <!-- fisheye camera {-->
    {{ generic.fisheye_camera_macro(
      camera_name = sensor_name,
      topic_ns_prefix = 'camera/',
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + sensor_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + sensor_name,
      parent_link = parent_link,
      frame_rate = spawner_args[spawner_keyword]['camera_rate'],
      horizontal_fov = math.radians(180),
      image_width = 752,
      image_height = 480,
      lens_type = 'custom',
      lens_c1 = 1.05,
      lens_c2 = 4,
      lens_f = 1.0,
      lens_fun = 'tan',
      lens_scale = True,
      lens_cutoff_angle = math.radians(90),
      lens_texture_size = 512,
      min_distance = 0.02,
      max_distance = 40,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['camera_noise'],
      mesh_file = 'model://mrs_robots_description/meshes/sensors/bluefox.dae',
      mesh_scale = '1 1 1',
      color = 'DarkGrey',
      visual_x = 0,
      visual_y = 0,
      visual_z = 0,
      visual_roll = math.radians(90),
      visual_pitch = 0,
      visual_yaw = 0,
      x = x,
      y = y,
      z = z,
      roll = roll,
      pitch = pitch,
      yaw = yaw)
    }}
    <!--}-->

    <!-- imu {-->
    {{ generic.imu_sensor_macro(
      sensor_name = sensor_name + '_imu',
      parent_link = sensor_name,
      update_rate = spawner_args[spawner_keyword]['imu_rate'],
      topic_name = '/' + spawner_args['name'] + '/' + sensor_name + '/imu',
      frame_name = spawner_args['name'] + '/' + sensor_name,
      noise_mean = spawner_args[spawner_keyword]['imu_noise'],
      x = 0,
      y = 0,
      z = 0,
      roll = -math.radians(90),
      pitch = 0,
      yaw = -math.radians(90))
    }}
    <!--}-->

    <!-- static tf {-->
    {{ generic.tf_static_macro(
       namespace = spawner_args['name'] + '/',
       parent_link = sensor_name + "_link",
       child_link = sensor_name + "_imu_link")
    }}
    {# <!--}--> #}

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ==================== miscellaneous components ==================== #}

{# light_macro {--> #}
{%- macro light_macro(parent_link, max_pitch_rate, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-light' -%}
  {%- set spawner_description = 'Add a light on a gimbal to the vehicle. Requires a Gazebo world with enabled shadows' -%}
  {%- set spawner_default_args = {'update_rate': 30, 'compensate_tilt': True, 'initial_on': True} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Light  {-->
    <link name="light_macro_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro('light', 0.01, 0.01, 0.01, 'Yellow', 0, 0, 0, 0, 0, 0) }}
    </link>

    <plugin name="light_plugin" filename="libMrsGazeboCommonResources_LightPlugin.so">
      <offset_x>{{ x }}</offset_x>
      <offset_y>{{ y }}</offset_y>
      <offset_z>{{ z }}</offset_z>
      <offset_roll>{{ roll }}</offset_roll>
      <offset_pitch>{{ pitch }}</offset_pitch>
      <offset_yaw>{{ yaw }}</offset_yaw>
      <spawning_frame>{{ parent_link }}</spawning_frame>
      <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
      <max_pitch_rate>{{ max_pitch_rate }}</max_pitch_rate>
      <initial_on>{{ spawner_args[spawner_keyword]['initial_on'] }}</initial_on>
      <compensate_tilt>{{ spawner_args[spawner_keyword]['compensate_tilt'] }}</compensate_tilt>
    </plugin>

    <joint name="light_macro_joint" type="revolute">
      <parent>{{ parent_link }}</parent>
      <child>light_macro_link</child>
      <axis>
        <xyz>0 1 0</xyz>
        <limit>
          <lower>-1.57</lower>
          <upper>1.57</upper>
          <effort>1</effort>
          <velocity>10</velocity>
        </limit>
        <dynamics>
          <damping>0.0</damping>
          <friction>0.0</friction>
        </dynamics>
      </axis>
    </joint>
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
<!--}-->

{# magnet_gripper_visualization_macro {--> #}
{%- macro magnet_gripper_visualization_macro(parent_link, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-magnetic-gripper' -%}
  {%- set spawner_description = 'Add a magnetic gripper visualization' -%}
  {%- set spawner_default_args = none %}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- magnetic gripper visualization {-->
    <link name="magnet_gripper_visualization_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro('front', 0.005, 0.05, 0.06, 'Black', -0.09, 0, 0.03, 0, 0, 0) }}
      {{ generic.visual_colored_box_macro('back', 0.005, 0.05, 0.06, 'Black', 0.09, 0, 0.03, 0, 0, 0) }}
      {{ generic.visual_colored_box_macro('down', 0.18, 0.05, 0.005, 'Black', 0, 0, 0, 0, 0, 0) }}
      {{ generic.visual_colored_box_macro('up', 0.18, 0.05, 0.005, 'Black', 0, 0, 0.06, 0, 0, 0) }}
      <collision name="collision">
        <pose>0 0 0 0 0 0</pose>
        <geometry>
          <box>
            <size>0.18 0.05 0.005</size>
          </box>
        </geometry>
      </collision>
    </link>

    <joint name="magnet_gripper_visualization_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>magnet_gripper_visualization_link</child>
    </joint>
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# omni_ultrasounds_macro {--> #}
{%- macro omni_ultrasounds_macro(sensors_list, parent_link, spawner_args) -%}

  {%- set spawner_keyword = 'enable-omni-ultrasounds' -%}
  {%- set spawner_description = 'Add omnidirectional ultrasonic sensors (up, down, 4 in horizontal plane)' -%}
  {%- set spawner_default_args = none -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Omni ultrasonic sensors {-->

    {%- for sensor in sensors_list -%}

      <!-- Ultrasonic{{suffix}} {-->
      {{ generic.ultrasonic_sensor_macro(
        namespace = spawner_args['name'],
        parent_link = parent_link,
        suffix = sensor['suffix'],
        x = sensor['x'],
        y = sensor['y'],
        z = sensor['z'],
        roll = sensor['roll'],
        pitch = sensor['pitch'],
        yaw = sensor['yaw'])
      }}
      <!--}-->

    {%- endfor -%}
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}



{# pendulum_macro {--> #}
{%- macro pendulum_macro(parent_link, x, y, z, spawner_args) -%}

  {%- set spawner_keyword = 'enable-pendulum' -%}
  {%- set spawner_description = 'Add a pendulum to the vehicle. Specify the length and mass of the whole chain. Length and mass is uniformly distributed between the links' -%}
  {%- set spawner_default_args = {'chain_length': 2.0, 'chain_mass': 0.1, 'load_mass': 1.0, 'load_radius': 0.1, 'num_links': 15, 'radius': 0.01} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Pendulum {-->
    <!-- chain link 0 {-->
    {{ generic.single_chain_pendulum_macro(
      parent_link = parent_link,
      id = 0,
      link_mass = spawner_args[spawner_keyword]['chain_mass'] / spawner_args[spawner_keyword]['num_links'],
      link_radius = spawner_args[spawner_keyword]['radius'],
      link_length = spawner_args[spawner_keyword]['chain_length'] / spawner_args[spawner_keyword]['num_links'],
      joint_offset_x = x,
      joint_offset_y = y,
      joint_offset_z = z)
    }}
    <!--}-->

    {%- for id_ in range(1, spawner_args[spawner_keyword]['num_links'] | int) -%}

      <!-- chain link {{id_}} {-->
      {{ generic.single_chain_pendulum_macro(
        parent_link = 'pendulum_chain_' + (id_ - 1)| string() + '_link',
        id = id_,
        link_mass = spawner_args[spawner_keyword]['chain_mass'] / spawner_args[spawner_keyword]['num_links'],
        link_radius = spawner_args[spawner_keyword]['radius'],
        link_length = spawner_args[spawner_keyword]['chain_length'] / spawner_args[spawner_keyword]['num_links'],
        joint_offset_x = 0,
        joint_offset_y = 0,
        joint_offset_z = -0.5 * (spawner_args[spawner_keyword]['chain_length'] / spawner_args[spawner_keyword]['num_links']))
      }}
      <!--}-->

    {%- endfor -%}
    <!--}-->

    <!-- load {-->
    {{ generic.load_pendulum_macro(
      parent_link = 'pendulum_chain_' + (spawner_args[spawner_keyword]['num_links'] - 1)| string() + '_link',
      link_length = spawner_args[spawner_keyword]['chain_length'] / spawner_args[spawner_keyword]['num_links'],
      load_mass = spawner_args[spawner_keyword]['load_mass'],
      load_radius = spawner_args[spawner_keyword]['load_radius']
      )
    }}
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
<!--}-->

{# safety_led_macro {--> #}
{%- macro safety_led_macro(parent_link, failure_duration_threshold, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-safety-led' -%}
  {%- set spawner_description = 'Add a safety LED' -%}
  {%- set spawner_default_args = none -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Safety LED {-->
    <link name="safety_led_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
    </link>

    <plugin name="safety_led_plugin" filename="libMrsGazeboCommonResources_SafetyLedPlugin.so">
      <model_name>safety_led</model_name>
      <failure_duration_threshold>{{ failure_duration_threshold }}</failure_duration_threshold>
      <model_spawn_delay>5.0</model_spawn_delay>
      <x>{{ x }}</x>
      <y>{{ y }}</y>
      <z>{{ z }}}</z>
      <roll>{{ roll }}</roll>
      <pitch>{{ pitch }}</pitch>
      <yaw>{{ yaw }}</yaw>
    </plugin>

    <joint name="safety_led_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>safety_led_link</child>
    </joint>
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# TODO: Timepix is not core #}
{# Timepix detector {--> #}
{%- macro timepix_macro(parent_link, sensor_name,  x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-timepix' -%}
  {%- set spawner_description = 'Add a Timepix radiation detector to the vehicle' -%}
  {%- set spawner_default_args = {'material': 'si', 'exposition_time': 0.1, 'thickness': 0.0003} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Timepix {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro(sensor_name, 0.02, 0.09, 0.02, 'Green', 0, 0.05, 0, 0, 0, 0) }}
    </link>

    <plugin name="{{ sensor_name }}_plugin" filename="libgazebo_timepix.so" >
      <exposition_time>{{ spawner_args[spawner_keyword]['exposition_time'] }}</exposition_time>   <!-- [s] -->
      <material>{{ spawner_args[spawner_keyword]['material'] }}</material>                        <!-- string -->
      <size>{{ spawner_args[spawner_keyword]['thickness'] }} 0.01408 0.01408</size>               <!-- [m m m] -->
    </plugin>

    <joint name="{{ sensor_name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_name }}_link</child>
    </joint>
    <!--}-->

  {%- endif -%}

{%- endmacro -%}
<!--}-->

{# TODO: Timepix3 is not core #}
{# Timepix3 detector {--> #}
{%- macro timepix3_macro(parent_link, sensor_name, sensor_suffix, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-timepix3' -%}
  {%- set spawner_description = 'Add a Timepix3 gamma event camera to the vehicle' -%}
  {%- set spawner_default_args = {'material': 'cdte', 'max_message_window': 1.0, 'thickness': 0.002} %}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Timepix3 {-->
    <link name="{{ sensor_name }}_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro(sensor_name, 0.02, 0.09, 0.02, 'Green', 0.05, 0, 0, 0, 0, 0) }}
    </link>

    <plugin name="{{ sensor_name }}_plugin" filename="libgazebo_timepix3.so" >
      <material>{{ material }}</material>                                                                 <!-- string -->
      <size>{{ spawner_args[spawner_keyword]['thickness'] }} 0.01408 0.01408</size>                       <!-- [m m m] -->
      <max_message_window>{{ spawner_args[spawner_keyword]['max_message_window'] }}</max_message_window>  <!-- [s] -->
      <sensor_suffix>{{ sensor_suffix }}</sensor_suffix>                                                  <!-- string -->
    </plugin>

    <joint name="{{ name }}_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>{{ sensor_name }}_link</child>
    </joint>
    <!--}-->

  {%- endif -%}

{%- endmacro -%}
<!--}-->

{# TODO: UWB plugin is not core #}
{# uwb_range_macro {--> #}
{%- macro uwb_range_macro(parent_link, x, y, z, roll, pitch, yaw, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-uwb-range' -%}
  {%- set spawner_description = 'Add Qorvo DW1000 UWB transceiver. Requires param "signal_id" to be set.' -%}
  {%- set spawner_default_args = {'signal_id': none, 'update_rate': 10} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}

    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- if spawner_args[spawner_keyword]['signal_id'] is not none -%}

      <!-- Qorvo DW1000 UWB {-->
      <link name="uwb_range_link">
        <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
        {{ generic.zero_inertial_macro() }}
        <sensor name="uwb_range_sensor" type="wireless_transmitter">
          <update_rate>{{ spawner_args[spawner_keyword]['update_rate'] }}</update_rate>
          <always_on>1</always_on>
          <plugin name="uwb_range_plugin" filename="libuwb_range.so">
            <uwb_id>{{ spawner_args[spawner_keyword]['signal_id'] }}</uwb_id>
            <publish_topic>/{{ spawner_args['name'] }}/uwb_range/range</publish_topic>
            <frame_name>{{ spawner_args['name'] }}/uwb</frame_name>
            <sensitivity>-150</sensitivity>
            <stddev>0.1</stddev>
          </plugin>
          <transceiver>
            <frequency>6489.6</frequency>
            <min_frequency>6240.0</min_frequency>
            <max_frequency>6739.2</max_frequency>
            <power>14.5</power>
            <gain>2.5</gain>
          </transceiver>
        </sensor>
      </link>
      <joint name="uwb_range_joint" type="fixed">
        <parent>{{ parent_link }}</parent>
        <child>uwb_range_link</child>
        <disableFixedJointLumping>true</disableFixedJointLumping>
        <preserveFixedJoint>true</preserveFixedJoint>
      </joint>

      <!-- mount {-->
      {{ mount if mount }}
      <!--}-->

      <!--}-->

    {%- endif -%}

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# water_gun_macro {--> #}
{%- macro water_gun_macro(parent_link, nozzle_offset_x, nozzle_offset_y, nozzle_offset_z, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-water-gun' -%}
  {%- set spawner_description = 'Add a water gun for firefighting. Requires a dummy object (spawning_reservoir) to be present in the simulation' -%}
  {%- set spawner_default_args = {'muzzle_velocity': 15.0, 'num_particles': 30, 'spread': 1.0, 'spawning_reservoir': 'the_void'} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- Water gun {-->
    <link name="water_gun_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_colored_box_macro('water_bag', 0.02, 0.08, 0.03, 'Blue', 0, 0, 0, 0, 0, 0) }}
      <visual name="nozzle_visual">
        <pose>{{ nozzle_offset_x - 0.08/2 }} {{ nozzle_offset_y }} {{ nozzle_offset_z - 0.006/2 }} 0 {{ math.radians(90) }} 0</pose>
        <geometry>
          <cylinder>
            <length>0.08</length>
            <radius>0.006</radius>
          </cylinder>
        </geometry>
        <material>
          <script>
            <name>Gazebo/DarkGrey</name>
            <uri>file://media/materials/scripts/gazebo.material</uri>
          </script>
        </material>
      </visual>
    </link>

    <plugin name="water_gun_plugin" filename="libMrsGazeboCommonResources_WaterGunPlugin.so">
      <muzzle_velocity>{{ spawner_args[spawner_keyword]['muzzle_velocity'] }}</muzzle_velocity>
      <offset_x>{{ nozzle_offset_x }}</offset_x>
      <offset_y>{{ nozzle_offset_y }}</offset_y>
      <offset_z>{{ nozzle_offset_z }}</offset_z>
      <spread>{{ spawner_args[spawner_keyword]['spread'] }}</spread>
      <particle_capacity>{{ spawner_args[spawner_keyword]['num_particles'] }}</particle_capacity>
      <spawning_reservoir>{{ spawner_args[spawner_keyword]['spawning_reservoir'] }}</spawning_reservoir>
    </plugin>

    <joint name="water_gun_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>water_gun_link</child>
    </joint>
    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# whycon_box_macro {--> #}
{%- macro whycon_box_macro(parent_link, x, y, z, roll, pitch, yaw, spawner_args) -%}

  {%- set spawner_keyword = 'enable-whycon-box' -%}
  {%- set spawner_description = 'Add a Whycon box for relative localization using visual markers' -%}
  {%- set spawner_default_args = none -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    {%- set mesh_file = 'model://mrs_robots_description/meshes/sensors/whycon_box.dae' -%}
    {%- set mesh_scale = '1 1 1' -%}

    <!-- Whycon Box {-->
    <link name="whycon_box_link">
      <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
      {{ generic.zero_inertial_macro() }}
      {{ generic.visual_mesh_textured_macro("whycon_box", mesh_file, mesh_scale, x, y, z, roll, pitch, yaw) }}
    </link>

    <joint name="whycon_box_joint" type="fixed">
      <parent>{{ parent_link }}</parent>
      <child>whycon_box_link</child>
    </joint>
    <!--}-->

  {%- endif -%}

{%- endmacro -%}
<!--}-->

{# third_person_camera_macro {--> #}
{%- macro third_person_camera_macro(camera_name, parent_link, mount, spawner_args) -%}

  {%- set spawner_keyword = 'enable-third-person-camera' -%}
  {%- set spawner_description = 'Add a third person camera following the UAV mode [1920x1080 60hz]' -%}
  {%- set spawner_default_args = {'update_rate': 60, 'noise_stddev': 0.0, 'x': '-1.5', 'y': '0.0', 'z': '0.5', 'hfov': 1.5, 'pitch': '0.32'} -%}

  {%- if spawner_keyword in spawner_args.keys() -%}
    {{ generic.handle_spawner_args(spawner_keyword, spawner_default_args, spawner_args) }}

    <!-- third person camera {-->

    <!-- sensor {-->
    {{ generic.camera_macro_meshless(
      parent_link = parent_link,
      camera_name = camera_name,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/' + camera_name + '_optical',
      sensor_base_frame_name = spawner_args['name'] + '/' + camera_name,
      frame_rate = spawner_args[spawner_keyword]['update_rate'],
      horizontal_fov = spawner_args[spawner_keyword]['hfov'],
      image_width = 1920,
      image_height = 1080,
      min_distance = 0.02,
      max_distance = 80,
      noise_mean = 0.0,
      noise_stddev = spawner_args[spawner_keyword]['noise_stddev'],
      x = spawner_args[spawner_keyword]['x'],
      y = spawner_args[spawner_keyword]['y'],
      z = spawner_args[spawner_keyword]['z'],
      roll = 0,
      pitch = spawner_args[spawner_keyword]['pitch'],
      yaw = 0)
    }}
    <!--}-->

    <!-- mount {-->
    {{ mount if mount }}
    <!--}-->

    <!--}-->

  {%- endif -%}
{%- endmacro -%}
{# <!--}--> #}

{# ==================== Unsupported components ==================== #}

{# TODO: not supported in the current version #}
{# TODO: not used #}
{# gps_satelites_blocking_macro {--> #}
{%- macro gps_satelites_blocking_macro(parent_link) -%}
<link name="gps_blocking_link">
  <pose>0 0 0 0 {{ -math.radians(90) }} 0</pose>
  {{ generic.zero_inertial_macro() }}
  <sensor name='gps_blocking_sensor' type='ray'>
    <visualize>false</visualize>
    <update_rate>2</update_rate>
    <ray>
      <scan>
        <horizontal>
          <samples>4</samples>
          <resolution>1</resolution>
          <min_angle>-1.1</min_angle>
          <max_angle>1.1</max_angle>
        </horizontal>
        <vertical>
          <samples>4</samples>
          <resolution>1</resolution>
          <min_angle>-0.9</min_angle>
          <max_angle>0.9</max_angle>
        </vertical>
      </scan>
      <range>
        <min>0.5</min>
        <max>50</max>
        <resolution>0.5</resolution>
      </range>
    </ray>
    <plugin name='gps_blocking_plugin' filename='libgazebo_ros_laser.so'>
      <topicName>gps_sat_blocking</topicName>
      <frameName>gps_blocking</frameName>
    </plugin>
  </sensor>
</link>

<joint name="gps_blocking_joint" type="fixed">
  <parent>{{ parent_link }}</parent>
  <child>gps_blocking_link</child>
</joint>
{%- endmacro -%}
<!--}-->

{# TODO: not supported in the current version #}
{# TODO: not used #}
{# parachute_macro {--> #}
{%- macro parachute_macro(parent_link, x, y, z, roll, pitch, yaw) -%}

  <!-- parachute {-->
  <link name="parachute_link">
    <pose>{{ x }} {{ y }} {{ z }} {{ roll }} {{ pitch }} {{ yaw }}</pose>
    {{ generic.zero_inertial_macro() }}
    <visual name="visual">
      <pose>0 0 0 0 0 0</pose>
      <geometry>
        <cylinder>
          <length>0.1</length>
          <radius>0.048</radius>
        </cylinder>
      </geometry>
      <material>
        <script>
          <name>Gazebo/DarkGrey</name>
          <uri>file://media/materials/scripts/gazebo.material</uri>
        </script>
      </material>
    </visual>
  </link>

  <plugin name="parachute_plugin" filename="libMrsGazeboCommonResources_ParachutePlugin.so">
    <air_density>1.225</air_density>
    <drag_coeff>500</drag_coeff>
    <cross_section>0.25</cross_section>
    <offset_x>0</offset_x>
    <offset_y>0</offset_y>
    <offset_z>-1.56</offset_z>
  </plugin>

  <joint name="parachute_joint" type="fixed">
    <parent>{{ parent_link }}</parent>
    <child>parachute_link</child>
  </joint>
  <!--}-->

{%- endmacro -%}
{# <!--}--> #}

</sdf>
