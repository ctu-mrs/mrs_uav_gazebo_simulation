<?xml version="1.0" encoding="utf-8"?>
<sdf version="1.6">

  {%- import 'mrs_robots_description/sdf/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 2.0 -%} {# [kg] #}
  {%- set body_radius = 0.1 -%} {# [m] #}
  {%- set body_height = 0.1 -%} {# [m] #}
  {%- set mass_prop = 0.005 -%} {# [kg] #}
  {%- set radius_rotor = 0.1651 -%} {# [m] #}

  {%- set motor_mesh_z_offset = -0.0086 -%} {# [m] #}
  {%- set rotor_xy_offset = 0.1812 -%} {# [m] #}
  {%- set rotor_z_offset = 0.057 -%} {# [m] #}

  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 0.0159236 -%}
  {%- set motor_constant = 16.48 -%} {# [kg.m/s^2] #}
  {%- set moment_constant = 0.016 -%} {# [m] #}
  {%- set time_constant_up = 1.0 / 80.0 -%} {# [s] #}
  {%- set time_constant_down = 1.0 / 40.0 -%} {# [s] #}
  {%- set max_rot_velocity = 1 -%} {# [rad/s] #}
  {%- set rotor_drag_coefficient = 0.1 -%} {# orig 8.06428e-04 #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.25 -%} {# [m] #}
  {%- set inertia_body_height = 0.05 -%} {# [m] #}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mesh_scale_prop_ccw = '1 1 1' -%}
  {%- set mesh_scale_prop_cw = '-1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Frame parts {--> #}
  {%- set top_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/top_board_mesh_file.dae' -%}
  {%- set bottom_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/bottom_board_mesh_file.dae' -%}
  {%- set arm_carbon_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_carbon_mesh_file.dae' -%}
  {%- set arm_plastic1_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_plastic1_mesh_file.stl' -%}
  {%- set arm_plastic2_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_plastic2_mesh_file.stl' -%}
  {%- set arm_3d_print_mesh_file = 'model://mrs_robots_description/meshes/x500v2/arm_3d_print_mesh_file.stl' -%}
  {%- set leg_3d_print_mesh_file = 'model://mrs_robots_description/meshes/x500v2/leg_3d_print_mesh_file.stl' -%}
  {# <!--}--> #}

  {# Motors and props {--> #}
  {%- set motor_bottom_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_bottom_mesh_file.stl' -%}
  {%- set motor_middle_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_middle_mesh_file.stl' -%}
  {%- set motor_top_mesh_file = 'model://mrs_robots_description/meshes/x500v2/motor_top_mesh_file.stl' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/x500v2/prop_mesh_file.dae' -%}
  {# <!--}--> #}

  {# Sensors and computers {--> #}
  {%- set pixhawk6c_mesh_file = 'model://mrs_robots_description/meshes/x500v2/pixhawk6c_mesh_file.stl' -%}
  {%- set gps_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/gps_mount_mesh_file.stl' -%}
  {%- set nuc_board_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_board_mesh_file.stl' -%}
  {%- set nuc_cooler_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_cooler_mesh_file.stl' -%}
  {%- set siyi_camera_mesh_file = 'model://mrs_robots_description/meshes/sensors/siyi_ZT6_camera.stl' -%}
  {%- set siyi_gimbal_mesh_file = 'model://mrs_robots_description/meshes/sensors/siyi_ZT6_gimbal.stl' -%}
  {# <!--}--> #}

  {# Mounts {--> #}
  {%- set battery_mesh_file = 'model://mrs_robots_description/meshes/x500v2/battery_mesh_file.stl' -%}
  {%- set battery_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/battery_mount_mesh_file.stl' -%}
  {%- set nuc_hex_posts_mesh_file = 'model://mrs_robots_description/meshes/x500v2/nuc_hex_posts_mesh_file.stl' -%}
  {%- set gps_module_mesh_file = 'model://mrs_robots_description/meshes/x500v2/gps_module_mesh_file.stl' -%}
  {%- set garmin_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/garmin_mount_mesh_file.stl' -%}
  {%- set lidar_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/lidar_mount_mesh_file.stl' -%}
  {%- set realsense_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/realsense_mount_mesh_file.stl' -%}
  {%- set bluefox_mount_mesh_file = 'model://mrs_robots_description/meshes/x500v2/bluefox_mount_mesh_file.stl' -%}
  {%- set uvdar_mount_mesh = 'model://mrs_robots_description/meshes/dji/f450/dji_f450_uvdar_mount.dae' -%}
  {%- set qorvo_dw1000_mount_file = 'model://mrs_robots_description/meshes/x500v2/qorvo_dw1000_mount.stl' -%}

  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = 0.0001 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = 0.0001 -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = 0.0001 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body physics {-->
      {{ generic.multirotor_physics_macro(
        mass = mass,
        body_radius = body_radius,
        body_height = body_height,
        rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
        ixx = body_ixx,
        ixy = body_ixy,
        ixz = body_ixz,
        iyy = body_iyy,
        iyz = body_iyz,
        izz = body_izz)
      }}
      <!--}-->

      <!-- Body visuals {-->

      <!-- Boards {-->
      {{ generic.visual_mesh_textured_macro(
        name = 'top_board',
        mesh_file = top_board_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}

      {{ generic.visual_mesh_textured_macro(
        name = 'bottom_board',
        mesh_file = bottom_board_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Arms and legs {-->
      {%- for id in range(0, 4) -%}

        {%- set affix = 'front_right' -%}
        {%- set print_color = 'Black' -%}
        {%- if id == 1 -%}
          {%- set affix = 'front_left' -%}
        {%- endif -%}
        {%- if id == 2 -%}
          {%- set affix = 'back_left' -%}
          {%- set print_color = 'Red' -%}
        {%- endif -%}
        {%- if id == 3 -%}
          {%- set affix = 'back_right' -%}
          {%- set print_color = 'Red' -%}
        {%- endif -%}

        {{ generic.visual_mesh_textured_macro(
          name = 'arm_carbon_' + affix,
          mesh_file = arm_carbon_mesh_file,
          mesh_scale = mesh_scale,
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_mrs_material_macro(
          name = 'arm_plastic1_' + affix,
          mesh_file = arm_plastic1_mesh_file,
          mesh_scale = mesh_scale,
          color = 'X500Blue',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_mrs_material_macro(
          name = 'arm_plastic2_' + affix,
          mesh_file = arm_plastic2_mesh_file,
          mesh_scale = mesh_scale,
          color = 'X500Blue',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_macro(
          name = 'arm_3d_print_' + affix,
          mesh_file = arm_3d_print_mesh_file,
          mesh_scale = mesh_scale,
          color = print_color,
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

      {%- endfor -%}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_front_right',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = 0.13,
        offset_y = -0.13,
        offset_z = -0.07)
      }}

     {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_front_left',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 1.57079633,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = 0.13,
        offset_y = 0.13,
        offset_z = -0.07)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_back_left',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 3.14159266,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = -0.13,
        offset_y = 0.13,
        offset_z = -0.07)
      }}

      {{ generic.leg_collision_offset_macro(
        name = 'leg_3d_print_back_right',
        mesh_file = leg_3d_print_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 4.71238899,
        collision_height = 0.165,
        collision_radius = 0.015,
        offset_x = -0.13,
        offset_y = -0.13,
        offset_z = -0.07)
      }}

      <!--}-->

      <!-- Intel nuc {-->
      {{ generic.visual_mesh_macro(
        name = 'nuc_board',
        mesh_file = nuc_board_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grass',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'nuc_cooler',
        mesh_file = nuc_cooler_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'nuc_hex_posts',
        mesh_file = nuc_hex_posts_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Pixhawk {-->
      {{ generic.visual_mesh_macro(
        name = 'pixhawk6c',
        mesh_file = pixhawk6c_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      <!-- Motors {-->
      {%- set affix = 'front_right' -%}

      {%- for id in range(0, 4) -%}

        {%- if id == 1 -%}
          {%- set affix = 'front_left' -%}
        {%- endif -%}
        {%- if id == 2 -%}
          {%- set affix = 'back_left' -%}
        {%- endif -%}
        {%- if id == 3 -%}
          {%- set affix = 'back_right' -%}
        {%- endif -%}

        {{ generic.visual_mesh_macro(
          name = 'motor_bottom_' + affix,
          mesh_file = motor_bottom_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Grey',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

        {{ generic.visual_mesh_macro(
          name = 'motor_middle_' + affix,
          mesh_file = motor_middle_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = id * 1.57079633)
        }}

      {%- endfor -%}
      <!--}-->

      <!-- Battery mount and battery {-->
      {{ generic.visual_mesh_macro(
        name = 'battery_mount',
        mesh_file = battery_mount_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Red',
        x = 0,
        y = 0,
        z = 0.001,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      {{ generic.visual_mesh_macro(
        name = 'battery',
        mesh_file = battery_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0.001,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90))
      }}
      <!--}-->

      {# GPS antenna and mount {--> #}
      {%- set gps_visuals -%}
      <!-- GPS mount {-->
      {{ generic.visual_link_macro(
        name = 'gps_mount',
        mesh_file = gps_mount_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Grey',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90),
        parent_link = root)
      }}
      <!--}-->

      <!-- GPS antenna {-->
      {{ generic.visual_link_macro(
        name = 'gps_module',
        mesh_file = gps_module_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = math.radians(90),
        parent_link = root)
      }}
      <!--}-->
      {%- endset -%}
      {# <!--}--> #}

      {# component mounts and holders (these must be passed as args into components, or must be called) {--> #}

      {# garmin down mount {--> #}
      {%- set garmin_down_mount -%}
        {{ generic.visual_link_macro(
          name = 'garmin_mount',
          mesh_file = garmin_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = -0.001,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# lidar mount {--> #}
      {%- set lidar_mount -%}
        {{ generic.visual_link_macro(
          name = 'rplidar_mount',
          mesh_file = lidar_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'FlatBlack',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# realsense mount {--> #}
      {%- set realsense_mount -%}
        {{ generic.visual_link_macro(
          name = 'realsense_mount',
          mesh_file = realsense_mount_mesh_file,
          mesh_scale = mesh_scale,
          color = 'Black',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# bluefox mount {--> #}
      {%- set bluefox_mount -%}
        {{ generic.visual_link_macro(
          name = 'bluefox_mount',
          mesh_file = bluefox_mount_mesh_file,
          mesh_scale = mesh_scale_milimeters,
          color = 'FlatBlack',
          x = 0,
          y = 0,
          z = 0,
          roll = 0,
          pitch = 0,
          yaw = math.radians(90),
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# uvdar mount {--> #}
      {%- set uvdar_mount -%}
        {{ generic.visual_link_macro(
          name = 'uvdar_mount',
          mesh_file = uvdar_mount_mesh,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.027,
          y = 0,
          z = 0.075,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# Qorvo DW1000 mount {--> #}
      {%- set qorvo_dw1000_mount -%}
        {{ generic.visual_link_macro(
          name = 'qorvo_dw1000_mount',
          mesh_file = qorvo_dw1000_mount_file,
          mesh_scale = mesh_scale_milimeters,
          color = 'DarkGrey',
          x = 0.0,
          y = -0.01,
          z = -0.078,
          roll = 0,
          pitch = 0,
          yaw = 0,
          parent_link = root)
        }}
      {%- endset -%}
      {# <!--}--> #}

      {# <!--}--> #}

      <!--}-->

    </link>

  {# Air drag {--> #}
  {{ generic.gazebo_fluid_resistance_plugin_macro(
    model_mass = mass,
    verbose = true,
    parent_link = root,
    uav_body_resistance_x = 0.1,
    uav_body_resistance_y = 0.1,
    uav_body_resistance_z = 0.2,
    )
  }}
  {# <!--}--> #}

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': rotor_xy_offset,
    'y': -rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 1,
    'direction': 'ccw',
    'x': -rotor_xy_offset,
    'y': rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'Grey'
    },
    {
    'motor_number': 2,
    'direction': 'cw',
    'x': rotor_xy_offset,
    'y': rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -rotor_xy_offset,
    'y': -rotor_xy_offset,
    'z': rotor_z_offset,
    'mesh_files': [prop_mesh_file, motor_top_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'Grey'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = radius_rotor,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = motor_mesh_z_offset,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

    <!-- Pixhawk {-->
    {%- set imu_topic = '/imu' -%}
    {%- set mag_topic = '/mag' -%}
    {%- set baro_topic = '/baro' -%}
    {%- set lidar_topic = '/lidar' -%}

    <!-- Gazebo ground truth {-->
    {{ generic.gazebo_groundtruth_macro(
      home_latitude = 0,
      home_longitude = 0,
      home_altitude = 0)
    }}
    <!--}-->

    <!-- GPS {-->
    {{ generic.gazebo_gps_macro(
      gps_name = 'gps0',
      parent_link = root,
      update_rate = 10,
      gps_noise = true,
      gps_xy_random_walk = 2.0,
      gps_z_random_walk = 4.0,
      gps_xy_noise_density = '2.0e-4',
      gps_z_noise_density = '4.0e-4',
      gps_vxy_noise_density = 0.2,
      gps_vz_noise_density = 0.4,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!-- Magnetometer {-->
    {{ generic.gazebo_magnetometer_macro(
      pub_rate = 100,
      noise_density = 0.0004,
      random_walk = 0.0000064,
      bias_correlation_time = 600,
      mag_topic = mag_topic)
    }}
    <!--}-->

    <!-- Barometer {-->
    {{ generic.gazebo_barometer_macro(
      baro_topic = baro_topic,
      pub_rate = 50,
      baro_drift_pa_per_sec = 0)
    }}
    <!--}-->

    <!-- Mavlink interface {-->
    {{ generic.gazebo_mavlink_interface_macro(
      imu_topic = imu_topic,
      mag_topic = mag_topic,
      baro_topic = baro_topic,
      lidar_topic = lidar_topic,
      mavlink_config = spawner_args['mavlink_config'])
    }}
    <!--}-->

    <!-- IMU {-->
    <!-- NOTE: IMU has to be last, otherwise the simulation is extremely slow! -->
    {{ generic.gazebo_imu_macro(
      imu_name = 'imu',
      parent_link = root,
      imu_topic = '/imu',
      gyroscope_noise_density = 0.00018665,
      gyroscope_random_walk = 0.000038785,
      gyroscope_bias_correlation_time = 1000.0,
      gyroscope_turn_on_bias_sigma = 0.0087,
      accelerometer_noise_density = 0.00186,
      accelerometer_random_walk = 0.006,
      accelerometer_bias_correlation_time = 300.0,
      accelerometer_turn_on_bias_sigma = 0.1960,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!--}-->

    {# ================================================================== #}
    {# ||                  optional sensor definitions                 || #}
    {# ================================================================== #}

    {# Ground truth {--> #}
    {{ components.ground_truth_macro(
      parent_link = root,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ======================= rangefinder sensors ====================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0625,
      z = -0.009,
      roll = 0,
      pitch = math.radians(90),
      yaw = math.radians(-90),
      mount = garmin_down_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ========================== LIDAR sensors ========================= #}

    {# Rplidar {--> #}
    {%- set rplidar = components.rplidar_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0,
      z = 0.136,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ rplidar }}
    {# <!--}--> #}

    {# Ouster {--> #}
    {%- set ouster = components.ouster_macro(
      parent_link = root,
      sensor_name = 'os',
      x = 0.0,
      y = 0.0,
      z = 0.107,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ ouster }}
    {# <!--}--> #}

    {# ========================== camera sensors ======================== #}

    {# Realsense placements {--> #}

    {# realsense front {--> #}
    {%- set realsense_front = components.realsense_front_macro(
      camera_name = 'front_rgbd',
      camera_suffix='',
      parent_link = root,
      x = 0.092,
      y = 0.0,
      z = 0.016,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ realsense_front }}
    {# <!--}--> #}

    {# realsense up {--> #}
    {%- set realsense_up = components.realsense_up_macro(
      camera_name = 'up_rgbd',
      camera_suffix='',
      parent_link = root,
      x = 0.086,
      y = 0,
      z = 0.03,
      roll = 0,
      pitch = -math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ realsense_up }}
    {# <!--}--> #}

    {# realsense down {--> #}
    {%- set realsense_down = components.realsense_down_macro(
      camera_name = 'down_rgbd',
      camera_suffix='',
      parent_link = root,
      x = 0.086,
      y = 0,
      z = 0.002,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ realsense_down }}
    {# <!--}--> #}

    {%- if realsense_front | replace('\s', '') | length != 0 or realsense_up | replace('\s', '') | length != 0 or realsense_down | replace('\s', '') | length != 0 -%}
      {{ realsense_mount }}
    {%- endif -%}

    {# <!--}--> #}

    {# Bluefox camera placements {--> #}

    {# bluefox (classic) {--> #}
    {%- set bluefox_camera = components.bluefox_camera_macro(
      camera_name = 'bluefox_optflow',
      parent_link = root,
      x = 0.0,
      y = -0.0515,
      z = -0.038,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ bluefox_camera }}
    {# <!--}--> #}

    {# bluefox reverse {--> #}
    {%- set bluefox_camera_reverse = components.bluefox_camera_reverse_macro(
      camera_name = 'bluefox_optflow',
      parent_link = root,
      x = 0.0,
      y = -0.0515,
      z = -0.038,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ bluefox_camera_reverse }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# UV camera placements {--> #}

    {# Dual UV cameras {--> #}
    {{ components.dual_uv_cameras_macro(
      parent_link = root,
      x1 = 0.039,
      y1 = 0.1175,
      z1 = 0.089,
      roll1 = 0,
      pitch1 = 0,
      yaw1 = math.radians(70),
      x2 = 0.039,
      y2 = -0.1175,
      z2 = 0.089,
      roll2 = 0,
      pitch2 = 0,
      yaw2 = -math.radians(70),
      mount = uvdar_mount,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Back UV camera {--> #}
    {{ components.back_uv_camera_macro(
      parent_link = root,
      x = -0.1,
      y = 0.0,
      z = 0.085,
      roll = math.radians(90),
      pitch = 0,
      yaw = math.radians(180),
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# <!--}--> #}
    
    {# third person camera {--> #}
    {%- set third_person_camera = components.third_person_camera_macro(
      camera_name = 'third_person_camera',
      parent_link = root,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ third_person_camera }}
    {# <!--}--> #}

    {# ========================== other sensors ========================= #}

    {# UV leds {--> #}
    {{ components.uv_leds_macro(
      parent_link = root,
      x1 = 0.2017755,
      x2 = 0.1947045,
      y1 = 0.1947045,
      y2 = 0.2017755,
      z = 0.025,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# UV leds beacon {--> #}
    {{ components.uv_leds_beacon_macro(
      parent_link = root,
      x1 = 0.01,
      x2 = 0.0,
      y1 = 0.0,
      y2 = 0.01,
      z = 0.125,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Qorvo UWB {--> #}
    {{ components.uwb_range_macro(
        parent_link = root,
        x = 0.0,
        y = 0.08,
        z = -0.10,
        roll = 0.0,
        pitch = 0.0,
        yaw = 0.0,
        mount = qorvo_dw1000_mount,
        spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Servo camera {--> #}
    {{ components.servo_camera_macro(
      parent = root,
      parent_frame_name = spawner_args['name'] + '/fcu',
      frame_namespace = spawner_args['name'] + '/servo_camera',
      offset_pitch_link_x = 0.0,
      offset_pitch_link_y = 0.0,
      offset_pitch_link_z = 0.0,
      offset_pitch_link_roll = 0.0,
      offset_pitch_link_yaw = 0.0,
      offset_pitch_link_pitch = 0.0,
      offset_roll_link_x = 0.0,
      offset_roll_link_y = 0.0,
      offset_roll_link_z = 0.0,
      offset_roll_link_roll = 0.0,
      offset_roll_link_yaw = 0.0,
      offset_roll_link_pitch = 0.0,
      offset_yaw_link_x = 0.0966901,
      offset_yaw_link_y = 0.00200395,
      offset_yaw_link_z = -0.060549,
      offset_yaw_link_roll = 0.0,
      offset_yaw_link_yaw = 0.0,
      offset_yaw_link_pitch = 0.0,
      tilt_update_rate = 30.0,
      min_pitch = -1.046,
      max_pitch = 1.57,
      min_roll = -0.6,
      max_roll = 0.6,
      min_yaw = -1.57,
      max_yaw = 1.57,
      max_pitch_rate = 0.2,
      max_roll_rate = 0.2,
      max_yaw_rate = 0.2,
      camera_update_rate = 30,
      horizontal_fov = 1.92,
      img_width = 1920,
      img_height = 1080,
      compensate_tilt_roll = true,
      compensate_tilt_pitch = true,
      compensate_tilt_yaw = false,
      pitch_link_mesh_file = siyi_camera_mesh_file,
      roll_link_mesh_file = '',
      yaw_link_mesh_file = '',
      mesh_scale = '',
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ====================== conditional components ==================== #}

    {# lidar mount / gps antenna visuals {--> #}
    {%- if rplidar | replace('\s', '') | length != 0 or ouster | replace('\s', '') | length != 0 -%}
      <!-- lidar mount {-->
      {{ lidar_mount }}
      <!--}-->
    {%- else -%}
      {# otherwise put a GPS antenna to the empty space #}
      {{ gps_visuals }}
    {%- endif -%}
    {# <!--}--> #}

    {# Bluefox mount {--> #}
    {%- if bluefox_camera | replace('\s', '') | length != 0 or bluefox_camera_reverse | replace('\s', '') | length != 0 -%}
      <!-- Bluefox mount {-->
      {{ bluefox_mount }}
      <!--}-->
    {%- endif -%}
    {# <!--}--> #}

  </model>
</sdf>
