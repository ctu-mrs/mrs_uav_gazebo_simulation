<?xml version="1.0" encoding="utf-8"?>
<sdf version='1.6'>

  {%- import 'mrs_robots_description/sdf/component_snippets.sdf.jinja' as components -%}
  {%- import 'mrs_robots_description/sdf/generic_components.sdf.jinja' as generic -%}

  {# ================================================================== #}
  {# ||                    parameters definition                     || #}
  {# ================================================================== #}

  {# Robot parameters and arguments {--> #}
  {%- set mass = 7.5 -%} {# [kg] #}
  {%- set body_radius = 0.47 -%} {# [m] #}
  {%- set body_height = 0.155 -%} {# [m] #}
  {%- set body_center_z = -0.0195 -%} {# [m] #}
  {%- set mass_prop = 0.005 -%} {# [kg] #}
  {%- set radius_prop = 0.165 -%} {# [m] #}
  {%- set rotor_offset_top = 0.0235 -%} {# [m] #}
  {%- set arm_length_x = 0.1911 -%} {# [m] #}
  {%- set arm_length_y = 0.2109 -%} {# [m] #}
  {%- set arm_height = 0.016 -%} {# [m] #}
  {%- set arm_offset_z = 0.015 -%} {# [m] #}
  {%- set motor_to_mount = 0.0095 -%} {# [m] #}
  {%- set motor_z_offset = -0.01875 -%} {# [m] #}
  {%- set motor_height = 0.0235 -%} {# [m] #}
  {%- set pixhawk_offset = 0.008 -%} {# [m] #}

  {%- set ultrasonic_x = 0.3173 -%} {# [bool] #}
  {%- set ultrasonic_y = 0.3390 -%} {# [bool] #}
  {%- set ultrasonic_yaw = 0.822463619 -%} {# [bool] #}

  {%- set root = 'base_link' -%}
  {# <!--}--> #}

  {# Motor constants {--> #}
  {%- set rotor_velocity_slowdown_sim = 0.0159236 -%}
  {%- set motor_constant = 23.44 -%} {# [kg.m/s^2] #}
  {%- set moment_constant = 0.016 -%} {# [m] #}
  {%- set time_constant_up = 1.0 / 80.0 -%} {# [s] #}
  {%- set time_constant_down = 1.0 / 40.0 -%} {# [s] #}
  {%- set max_rot_velocity = 1 -%} {# [rad/s] #}
  {%- set rotor_drag_coefficient = 0.001 -%} {# orig 8.06428e-04 #}
  {%- set rolling_moment_coefficient = '1.0e-6' -%}
  {# <!--}--> #}

  {# Inertia constants {--> #}
  {%- set inertia_body_radius = 0.29 -%} {# [m] #}
  {%- set inertia_body_height = 0.20 -%} {# [m] #}
  {# <!--}--> #}

  {# Meshes {--> #}

  {# Drone parts {--> #}
  {%- set frame_legless_sensorless_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/NAKI_legless_frame.dae' -%}
  {%- set legs_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/NAKI_legs.dae'-%}
  {%- set motor_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/dji_f450_rotor.dae' -%}
  {%- set prop_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/NAKI_propeller.dae'-%}
  {%- set pixhawk_mesh_file = 'model://mrs_robots_description/meshes/sensors/pixhawk.dae' -%}
  {%- set sony_camera_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/NAKI_sony_alpha_6500_w_gimbal_mount.dae' -%}
  {%- set gimbal_mesh_file = 'model://mrs_robots_description/meshes/custom/naki/NAKI_gimbal_movable_part.dae' -%}
  {# <!--}--> #}

  {# Scales {--> #}
  {%- set mesh_scale = '1 1 1' -%}
  {%- set mesh_scale_prop_ccw = '-1 1 1' -%}
  {%- set mesh_scale_prop_cw = '1 1 1' -%}
  {%- set mesh_scale_milimeters = '0.001 0.001 0.001' -%}
  {# <!--}--> #}

  {# <!--}--> #}

  {# Inertias {--> #}
  {%- set body_ixx = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_ixy = 0 -%}
  {%- set body_ixz = 0 -%}
  {%- set body_iyy = mass * (3 * inertia_body_radius * inertia_body_radius + inertia_body_height * inertia_body_height) / 12 -%}
  {%- set body_iyz = 0 -%}
  {%- set body_izz = (mass * inertia_body_radius * inertia_body_radius) / 2 -%}

  {%- set prop_ixx = 0.0001 -%}
  {%- set prop_ixy = 0 -%}
  {%- set prop_ixz = 0 -%}
  {%- set prop_iyy = 0.0001 -%}
  {%- set prop_iyz = 0 -%}
  {%- set prop_izz = 0.0001 -%}
  {# <!--}--> #}

  <model name="{{ spawner_args['name'] }}">

    {# ================================================================== #}
    {# ||                    bare body definitions                     || #}
    {# ================================================================== #}

    <link name="{{ root }}">

      <!-- Body physics {-->
      {{ generic.multirotor_physics_macro(
        mass = mass,
        body_radius = body_radius,
        body_height = body_height,
        rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
        ixx = body_ixx,
        ixy = body_ixy,
        ixz = body_ixz,
        iyy = body_iyy,
        iyz = body_iyz,
        izz = body_izz)
      }}
      <!--}-->

      <!-- Body visuals {-->

      <!-- Boards {-->
      {{ generic.visual_mesh_textured_macro(
        name = 'frame_legless_sensorless',
        mesh_file = frame_legless_sensorless_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Pixhawk {-->
      {{ generic.visual_mesh_macro(
        name = 'pixhawk',
        mesh_file = pixhawk_mesh_file,
        mesh_scale = mesh_scale,
        color = 'DarkGrey',
        x = 0,
        y = 0,
        z = pixhawk_offset,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Legs {-->
      {{ generic.visual_mesh_textured_macro(
        name = 'legs',
        mesh_file = legs_mesh_file,
        mesh_scale = mesh_scale,
        x = 0,
        y = 0,
        z = 0,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      {{ generic.collision_cylinder_macro(
        name = 'left_leg',
        collision_length = 0.17,
        collision_radius = 0.07,
        x = 0,
        y = -0.2,
        z = -0.17,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      {{ generic.collision_cylinder_macro(
        name = 'right_leg',
        collision_length = 0.17,
        collision_radius = 0.07,
        x = 0,
        y = 0.2,
        z = -0.17,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}
      <!--}-->

      <!-- Motors {-->
      {{ generic.visual_mesh_macro(
        name = 'top_front_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length_x,
        y = -arm_length_y,
        z = motor_z_offset + motor_to_mount,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'top_back_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length_x,
        y = arm_length_y,
        z = motor_z_offset + motor_to_mount,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'top_front_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length_x,
        y = arm_length_y,
        z = motor_z_offset + motor_to_mount,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'top_back_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length_x,
        y = -arm_length_y,
        z = motor_z_offset + motor_to_mount,
        roll = 0,
        pitch = 0,
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'bottom_front_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length_x,
        y = -arm_length_y,
        z = motor_z_offset - motor_to_mount,
        roll = 0,
        pitch = math.radians(180),
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'bottom_back_right_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length_x,
        y = arm_length_y,
        z = motor_z_offset - motor_to_mount,
        roll = 0,
        pitch = math.radians(180),
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'bottom_front_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = arm_length_x,
        y = arm_length_y,
        z = motor_z_offset - motor_to_mount,
        roll = 0,
        pitch = math.radians(180),
        yaw = 0)
      }}

      {{ generic.visual_mesh_macro(
        name = 'bottom_back_left_motor',
        mesh_file = motor_mesh_file,
        mesh_scale = mesh_scale,
        color = 'Black',
        x = -arm_length_x,
        y = -arm_length_y,
        z = motor_z_offset - motor_to_mount,
        roll = 0,
        pitch = math.radians(180),
        yaw = 0)
      }}
      <!--}-->

      <!--}-->

    </link>

  {# Air drag {--> #}
  {{ generic.gazebo_fluid_resistance_plugin_macro(
    model_mass = mass,
    verbose = true,
    parent_link = root,
    uav_body_resistance_x = 0.1,
    uav_body_resistance_y = 0.1,
    uav_body_resistance_z = 0.2,
    )
  }}
  {# <!--}--> #}

    {# Propellers {--> #}
    {%- set prop_list = [
    {
    'motor_number': 0,
    'direction': 'ccw',
    'x': arm_length_x,
    'y': -arm_length_y,
    'z': motor_z_offset + motor_to_mount + motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    },
    {
    'motor_number': 2,
    'direction': 'ccw',
    'x': -arm_length_x,
    'y': arm_length_y,
    'z': motor_z_offset + motor_to_mount + motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    },
    {
    'motor_number': 1,
    'direction': 'cw',
    'x': arm_length_x,
    'y': arm_length_y,
    'z': motor_z_offset + motor_to_mount + motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    },
    {
    'motor_number': 3,
    'direction': 'cw',
    'x': -arm_length_x,
    'y': -arm_length_y,
    'z': motor_z_offset + motor_to_mount + motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    },
    {
    'motor_number': 5,
    'direction': 'cw',
    'x': arm_length_x,
    'y': -arm_length_y,
    'z': motor_z_offset - motor_to_mount - motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    },
    {
    'motor_number': 7,
    'direction': 'cw',
    'x': -arm_length_x,
    'y': arm_length_y,
    'z': motor_z_offset - motor_to_mount - motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_cw,
    'color': 'White'
    },
    {
    'motor_number': 4,
    'direction': 'ccw',
    'x': arm_length_x,
    'y': arm_length_y,
    'z': motor_z_offset - motor_to_mount - motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    },
    {
    'motor_number': 6,
    'direction': 'ccw',
    'x': -arm_length_x,
    'y': -arm_length_y,
    'z': motor_z_offset - motor_to_mount - motor_height,
    'mesh_files': [prop_mesh_file],
    'mesh_scale': mesh_scale_prop_ccw,
    'color': 'White'
    }
    ]
    -%}
    {{ components.propellers_macro(
      prop_list = prop_list,
      rotor_velocity_slowdown_sim = rotor_velocity_slowdown_sim,
      motor_constant = motor_constant,
      moment_constant = moment_constant,
      parent = root,
      mass = mass_prop,
      radius = radius_prop,
      time_constant_up = time_constant_up,
      time_constant_down = time_constant_down,
      max_rot_velocity = max_rot_velocity,
      rotor_drag_coefficient = rotor_drag_coefficient,
      rolling_moment_coefficient = rolling_moment_coefficient,
      meshes_z_offset = 0,
      prop_ixx = prop_ixx,
      prop_ixy = prop_ixy,
      prop_ixz = prop_ixz,
      prop_iyy = prop_iyy,
      prop_iyz = prop_iyz,
      prop_izz = prop_izz,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ================================================================== #}
    {# ||                compulsory sensor definitions                 || #}
    {# ================================================================== #}

    <!-- Pixhawk {-->
    {%- set imu_topic = '/imu' -%}
    {%- set mag_topic = '/mag' -%}
    {%- set baro_topic = '/baro' -%}
    {%- set lidar_topic = '/lidar' -%}

    <!-- Gazebo ground truth {-->
    {{ generic.gazebo_groundtruth_macro(
      home_latitude = 0,
      home_longitude = 0,
      home_altitude = 0)
    }}
    <!--}-->

    <!-- GPS {-->
    {{ generic.gazebo_gps_macro(
      gps_name = 'gps0',
      parent_link = root,
      update_rate = 10,
      gps_noise = true,
      gps_xy_random_walk = 2.0,
      gps_z_random_walk = 4.0,
      gps_xy_noise_density = '2.0e-4',
      gps_z_noise_density = '4.0e-4',
      gps_vxy_noise_density = 0.2,
      gps_vz_noise_density = 0.4,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!-- Magnetometer {-->
    {{ generic.gazebo_magnetometer_macro(
      pub_rate = 100,
      noise_density = 0.0004,
      random_walk = 0.0000064,
      bias_correlation_time = 600,
      mag_topic = mag_topic)
    }}
    <!--}-->

    <!-- Barometer {-->
    {{ generic.gazebo_barometer_macro(
      baro_topic = baro_topic,
      pub_rate = 50,
      baro_drift_pa_per_sec = 0)
    }}
    <!--}-->

    <!-- Mavlink interface {-->
    {{ generic.gazebo_mavlink_interface_macro(
      imu_topic = imu_topic,
      mag_topic = mag_topic,
      baro_topic = baro_topic,
      lidar_topic = lidar_topic,
      mavlink_config = spawner_args['mavlink_config'])
    }}
    <!--}-->

    <!-- IMU {-->
    <!-- NOTE: IMU has to be last, otherwise the simulation is extremely slow! -->
    {{ generic.gazebo_imu_macro(
      imu_name = 'imu',
      parent_link = root,
      imu_topic = '/imu',
      gyroscope_noise_density = 0.00018665,
      gyroscope_random_walk = 0.000038785,
      gyroscope_bias_correlation_time = 1000.0,
      gyroscope_turn_on_bias_sigma = 0.0087,
      accelerometer_noise_density = 0.00186,
      accelerometer_random_walk = 0.006,
      accelerometer_bias_correlation_time = 300.0,
      accelerometer_turn_on_bias_sigma = 0.1960,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0)
    }}
    <!--}-->

    <!--}-->

    {# ================================================================== #}
    {# ||                  optional sensor definitions                 || #}
    {# ================================================================== #}

    {# Ground truth {--> #}
    {{ components.ground_truth_macro(
      parent_link = root,
      x = 0,
      y = 0,
      z = 0,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ======================= rangefinder sensors ====================== #}

    {# Garmin down {--> #}
    {{ components.garmin_down_macro(
      parent_link = root,
      x = 0.0775,
      y = 0,
      z = -0.039,
      roll = 0,
      pitch = math.radians(90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Garmin up {--> #}
    {{ components.garmin_up_external_macro(
      parent_link = root,
      x = 0.0775,
      y = 0,
      z = 0,
      roll = 0,
      pitch = math.radians(-90),
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Ultrasonic sensors {--> #}
    {%- set ultrasonic_sensors_list = [
    {
    'suffix': '_down',
    'x': 0.02,
    'y': 0,
    'z': -0.1535,
    'roll': 0,
    'pitch': math.radians(90),
    'yaw': 0
    },
    {
    'suffix': '_up',
    'x': -0.1686,
    'y': 0,
    'z': 0.001,
    'roll': 0,
    'pitch': math.radians(-90),
    'yaw': 0
    },
    {
    'suffix': '_fl',
    'x': ultrasonic_x,
    'y': ultrasonic_y,
    'z': -0.019,
    'roll': 0,
    'pitch': 0,
    'yaw': ultrasonic_yaw
    },
    {
    'suffix': '_fr',
    'x': ultrasonic_x,
    'y': -ultrasonic_y,
    'z': -0.019,
    'roll': 0,
    'pitch': 0,
    'yaw': -ultrasonic_yaw
    },
    {
    'suffix': '_bl',
    'x': -ultrasonic_x,
    'y': ultrasonic_y,
    'z': -0.019,
    'roll': 0,
    'pitch': 0,
    'yaw': ultrasonic_yaw + math.radians(90)
    },
    {
    'suffix': '_br',
    'x': -ultrasonic_x,
    'y': -ultrasonic_y,
    'z': -0.019,
    'roll': 0,
    'pitch': 0,
    'yaw': -(ultrasonic_yaw + math.radians(90))
    },
    ]
    -%}
    {{ components.omni_ultrasounds_macro(
      sensors_list = ultrasonic_sensors_list,
      parent_link = root,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ========================== LIDAR sensors ========================= #}

    {# Rplidar {--> #}
    {{ components.rplidar_macro(
      parent_link = root,
      x = 0.0,
      y = 0.0,
      z = 0.09,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Ouster {--> #}
    {%- set ouster = components.ouster_macro(
      parent_link = root,
      sensor_name = 'os',
      x = 0.0,
      y = 0.0,
      z = 0.0611,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    -%}
    {{ ouster }}
    {# <!--}--> #}

    {# ========================== camera sensors ======================== #}

    {# Realsense placements {--> #}

    {# Realsense front {--> #}
    {{ components.realsense_front_macro(
      camera_name = 'rgbd',
      camera_suffix='',
      parent_link = root,
      x = 0.2255,
      y = 0,
      z = -0.0155,
      roll = 0,
      pitch = 0,
      yaw = 0,
      mount = none,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# <!--}--> #}

    {# Servo camera {--> #}
    {{ components.servo_camera_macro(
      parent = root,
      parent_frame_name = spawner_args['name'] + '/fcu',
      camera_frame_name = spawner_args['name'] + '/servo_camera_optical',
      sensor_base_frame_name = spawner_args['name'] + '/servo_camera',
      offset_pitch_link_x = 0.12928,
      offset_pitch_link_y = '7.605e-5',
      offset_pitch_link_z = -0.006051,
      offset_pitch_link_roll = 0.0,
      offset_pitch_link_yaw = 0.0,
      offset_pitch_link_pitch = 0.0,
      offset_roll_link_x = 0.0966901,
      offset_roll_link_y = 0.00200395,
      offset_roll_link_z = -0.130549,
      offset_roll_link_roll = 0.0,
      offset_roll_link_yaw = 0.0,
      offset_roll_link_pitch = 0.0,
      tilt_update_rate = 30.0,
      min_pitch = -1.046,
      max_pitch = 1.57,
      min_roll = -0.6,
      max_roll = 0.6,
      max_pitch_rate = 0.2,
      max_roll_rate = 0.2,
      camera_update_rate = 30,
      horizontal_fov = 1.92,
      img_width = 1920,
      img_height = 1080,
      compensate_tilt_roll = true,
      compensate_tilt_pitch = true,
      pitch_link_mesh_file = sony_camera_mesh_file,
      roll_link_mesh_file = gimbal_mesh_file,
      mesh_scale = '',
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# ========================== other sensors ========================= #}

    {# Light {--> #}
    {{ components.light_macro(
      parent_link = root,
      max_pitch_rate = 0.1,
      x = 0.2,
      y = 0.0,
      z = -0.1,
      roll = 0,
      pitch = 0,
      yaw = 0,
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

    {# Safety LED {--> #}
    {{ components.safety_led_macro(
      parent_link = root,
      failure_duration_threshold = 0.2,
      x = -0.202,
      y = 0.0,
      z = -0.0195,
      roll = 0,
      pitch = 0,
      yaw = math.radians(180),
      spawner_args = spawner_args)
    }}
    {# <!--}--> #}

  </model>
</sdf>
